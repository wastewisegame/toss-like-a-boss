{"version":3,"sources":["img/fifthHowToSlide.png","img/firstHowToSlide.png","img/secondHowToSlide.png","img/thirdHowToSlide.png","img/fourthHowToSlide.png","redux/reducers/errorsReducer.js","redux/reducers/loginModeReducer.js","redux/reducers/userReducer.js","redux/reducers/gameScoreReducer.js","redux/reducers/gameWrongAnswerReducer.js","redux/reducers/leaderboardReducer.js","redux/reducers/gameItemsReducer.js","redux/reducers/orgSettingsReducer.js","redux/reducers/teamSettingsReducer.js","redux/reducers/contestSettingsReducer.js","redux/reducers/compostBinReducer.js","redux/reducers/currentGameValueReducer.js","redux/reducers/itemReducer.js","redux/reducers/gameTimeReducer.js","redux/reducers/contestUserInfoReducer.js","redux/reducers/contestCompostBooleanReducer.js","redux/reducers/correctSnackBarReducer.js","redux/reducers/wasteWiseAdminReducer.js","redux/reducers/organizationTeamNameReducer.js","redux/reducers/incorrectSnackBarReducer.js","redux/reducers/animateGarbageReducer.js","redux/reducers/animateRecycleReducer.js","redux/reducers/animateCompostReducer.js","redux/reducers/imageUrlReducer.js","redux/reducers/currentContestInfoReducer.js","redux/reducers/companyIdNumberReducer.js","redux/reducers/teamIdNumberReducer.js","redux/reducers/adminGameStatistics.js","redux/reducers/index.js","redux/sagas/loginSaga.js","redux/sagas/registrationSaga.js","redux/sagas/userSaga.js","components/PerfectScore/PerfectScore.jsx","components/ResultsItemCard/ResultsItemCard.jsx","components/ResultsGuestPlayer/ResultsGuestPlayer.jsx","redux/sagas/gameSaga.js","redux/sagas/leaderboardSaga.js","redux/sagas/orgSettingsSaga.js","redux/sagas/itemSaga.js","redux/sagas/index.js","components/Nav/Nav.js","components/LoginPage/LoginPage.js","components/RegisterPage/RegisterPage.js","components/ProtectedRoute/ProtectedRoute.js","components/CompostBinChoice/CompostBinChoice.jsx","components/CompostBinModal/CompostBinModal.jsx","components/GameLaunch/GameLaunch.js","components/AdminRoute/AdminRoute.js","components/ItemTypes/ItemTypes.jsx","icons/GarbageFilled.js","components/GarbageBin/GarbageBin.jsx","icons/Bin.js","components/CompostBin/CompostBin.jsx","icons/RecycleBin.js","components/RecycleBin/RecycleBin.jsx","components/DraggableItem/DraggableItem.jsx","components/Game/IncorrectSnackBar.jsx","components/Game/CorrectSnackBar.jsx","components/StartGameModal/StartGameModal.jsx","components/Game/Game.js","components/Resources/Resources.js","components/LeaderboardList/LeaderboardList.jsx","components/LeaderBoardCompany/LeaderBoardCompany.js","components/SettingsOrganization/SettingsComponents/OrganizationName.js","components/SettingsOrganization/SettingsComponents/Teams.js","components/SettingsOrganization/SettingsComponents/Contests.js","components/SettingsOrganization/SettingsOrganization.js","components/SettingsAdmin/Components/Items.js","components/SettingsAdmin/Components/Users.js","components/SettingsAdmin/SettingsAdmin.js","components/AdminGameData/AdminGameDataTable.jsx","components/AdminGameData/AdminGameData.jsx","components/Resources/ResourceCredits.jsx","components/Theme/Theme.js","components/HowToPlay/HowToPlay.js","components/App/App.js","index.js","img/WasteWiselogo.jpg"],"names":["module","exports","combineReducers","loginMessage","state","action","type","registrationMessage","loginMode","userReducer","payload","gameScoreReducer","gameWrongAnswerReducer","leaderboard","gameItemsReducer","orgSettings","teamSettings","contestSettings","compostBinReducer","currentGameValueReducer","item","gameTimeReducer","contestUserInfoReducer","contestCompostBooleanReducer","correctSnackBarReducer","wasteWiseAdminUsers","organizationTeamNamesReducer","team_name","incorrectSnackBarReducer","animateGarbageReducer","animateRecycleReducer","animateCompostReducer","imageUrl","currentContestInfo","companyIdNumberReducer","id","teamIdNumberReducer","adminGameStatistics","rootReducer","errors","user","leaderboardReducer","organizationTeamNameReducer","imageUrlReducer","loginUser","logoutUser","loginSaga","put","config","headers","withCredentials","axios","post","response","status","takeLatest","registerUser","addWasteWiseUser","fetchWasteWiseUsers","deleteUser","updateUser","updateUserWithoutPassword","registrationSaga","data","get","delete","fetchUser","userSaga","PerfectScore","Typography","className","this","props","classes","perfectText","variant","component","Component","withStyles","textAlign","padding","margin","ResultsItemCard","wrongAnswerArray","wrongAnswers","map","card","Card","cardBody","CardHeader","itemHeader","title","name","CardContent","CardMedia","media","image","url","text","item_text","endText","connect","reduxStore","width","height","backgroundSize","backgroundRepeat","backgroundPosition","display","justifyContent","maxWidth","maxHeight","backgroundColor","ResultsGuestPlayer","sendContestGameData","dispatch","firstName","contestUserInfo","lastName","email","score","gameScore","time","gameTime","contestIdNumber","organizationIdNumber","organization_id","teamIdNumber","playAgain","history","location","search","push","handleLeaderboardClick","parseInt","resultsDiv","Grid","container","justify","spacing","alignItems","scoreText","undefined","gameWrongAnswers","length","leaderboardview","Button","color","leaderboardButton","onClick","playAgainButton","organizationInfo","contestInfo","background","backgroundImage","opacity","marginBottom","addWrongAnswer","fetchGameItems","firstTryCorrect","firstTryIncorrect","getContestCompostBoolean","getTeamNames","fetchCurrentContestInfo","gameSaga","takeEvery","getLeaderboard","getCompanyId","fetchTeamIdNumber","watchMe","params","Object","keys","key","join","fetchOrganization","updateOrganizationName","fetchTeams","updateTeam","deleteTeam","addTeam","fetchContests","updateContest","deleteContest","addContest","orgSettingsSaga","fetchItems","fetchGameStatistics","addItem","deleteItem","uploadImage","updateItem","addItemImage","itemSaga","file","fileParts","split","fileName","fileType","awsSignedResponse","returnData","signedRequest","attachment_url","rootSaga","all","leaderBoardSaga","Nav","value","handleChange","event","setState","handleSetDefaultValue","window","href","includes","root","AppBar","position","Tabs","onChange","scrollButtons","indicatorColor","textColor","src","mainlogo","style","Tab","label","Link","to","access_code","icon","path","mdiGamepadSquare","size","horizontal","rotate","wastewise_admin","mdiSettingsBox","mdiTableLarge","mdiHelpCircle","mdiAccountPlus","mdiDoorClosedLock","mdiDoorOpen","React","theme","flexGrow","palette","paper","LoginPage","username","password","login","preventDefault","handleInputChangeFor","propertyName","target","Box","marginTop","sm","role","onSubmit","h1","TextField","align","InputProps","input","cssOutlinedInput","focused","cssFocused","notchedOutline","InputLabelProps","shrink","withRouter","borderColor","cssLabel","RegisterPage","confirmPassword","organizationName","contestName","compostBin","contestStartDate","contestStartTime","contestEndDate","contestEndTime","accessCode","fieldValidation","alert","toLogin","generateAccessId","Math","floor","random","hourSelection","i","hourFormat","displayValue","sqlValue","j","question","fieldMedium","fieldLarge","FormControl","radio","FormLabel","RadioGroup","aria-label","FormControlLabel","control","Radio","select","SelectProps","MenuProps","hour","MenuItem","timeOptions","fontSize","ComponentToShow","ComponentToProtect","otherProps","CompostBinChoice","noCompostClick","compostDivHolderDiv","compostDiv","compostButtons","button","borderRadius","choiceText","border","useState","open","setOpen","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","withReactContent","Swal","styles","HowToPlayButton","PlayButton","contestPlayButton","contestPlayButtonDialog","contestForm","formInputs","teamSelect","svgIcon","paddingRight","mainDiv","nameHeader","fontFamily","playButtonDiv","contestDiv","contestFormHeader","dialogHeader","GameLaunch","timeToPlay","contestPlayReady","teamName","modalOpen","handleTeamNames","pop","howToPlay","toGame","handleSubmit","compostBoolean","compost","handleOpen","handleClose","contestIdParam","handlePresoClick","getContestInfo","organizationId","prevProps","currentContest","contestId","teamNameArray","teamNames","moment","require","start_date","start_time","end_date","end_time","start","valueOf","end","current","Date","now","activeContest","xs","alignContent","gutterBottom","required","InputLabel","Select","default","contestUser","SvgGarbageFilled","viewBox","d","fill","cx","cy","rx","ry","transform","x","y","marginRight","lineHeight","float","DropTarget","ItemTypes","drop","monitor","connectDropTarget","dropTarget","isOver","canDrop","ref","SvgBin","r","SvgRecycleBin","data-name","cursor","firstTry","DragNDrop","items","currentGameValue","gameItems","DragSource","beginDrag","endDrag","getItem","dropResult","getDropResult","setTimeout","connectDragSource","dragSource","isDragging","backgroundImageURL","variantIcon","error","ErrorIcon","MySnackbarContentWrapper","minWidth","iconVariant","unit","message","other","Icon","SnackbarContent","classNames","IncorrectSnackBar","Snackbar","snackBar","anchorOrigin","vertical","store","autoHideDuration","success","CheckCircleIcon","green","IconButton","close","CorrectSnackBar","Transition","Slide","direction","StartGameModal","handleTimerStart","TransitionComponent","keepMounted","dialogBox","dialogText","modal","modalHeader","fontWeight","Shake","styled","div","keyframes","shake","Bounce","bounce","Game","gameStarted","timer","setInterval","goToResults","backToHome","toReady","clearInterval","scoreboardHolder","scoreboardBackground","scoreboard","scoreboardSmallText","timerText","scoreboardGameItemText","gameItem","receptacle","itemId","garbageAnimate","recycleAnimate","compostAnimate","bin","blur","itemName","Resources","goToWasteWise","Paper","a","wasteWiseLogo","alt","link","p","resourcesButton","LeaderboardList","TableRow","TableCell","player","first_name","last_name","Leaderboard","getLeaderboardInfo","grid","Table","TableHead","TableBody","OrganizationName","organizationNameEdit","toggleOrganizationNameEdit","organization","organization_name","handleChangeFor","handleOrganizationNameSave","getOrganization","cardHeader","cardContent","CardActions","marginLeft","Edit","Cancel","Save","MySwal","Teams","teamNameEdit","teamNameId","teamEditOpen","teamAddOpen","handleTeamEditOpen","handleTeamAddOpen","handleTeamClose","handleEdit","handleDelete","fire","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","handleTeamAdd","getTeams","teamList","team","cardContentIconsLeft","cardContentIcons","Delete","cardContentTeams","AddCircle","tableTeam","Modal","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","form","cardContentLeft","paddingLeft","boxShadow","shadows","secondary","main","Contests","contestNameId","contestCompostBin","contestAccessCode","contestEditOpen","contestAddOpen","snackBarShowOpen","handleContestEditOpen","startDate","startTime","endDate","endTime","handleContestAddOpen","handleContestClose","handleAdd","copyLink","code","dummy","document","createElement","currentUrl","newUrl","each","body","appendChild","execCommand","removeChild","handleSnackShowClose","reason","getContests","contestList","contest","contest_name","cardContentContest","tableContest","edit","contestLink","defaultValue","ContentProps","Close","td","SettingsOrganization","Settings","Items","toggleAdd","itemText","selectedFile","pleaseWait","handleAddClick","handleItemEditOpen","itemEditOpen","handleItemAdd","handleUploadInputChange","e","files","handleUpload","handleItemClose","itemReceptacle","itemUrl","getItems","itemList","cardContentItems","Fab","Remove","Add","upload","tableItem","imageModal","Users","userEditOpen","userId","editFieldValidation","handleEditWithoutPassword","handleUserEditOpen","handleUserClose","getUsers","handleUserAdd","userList","admin","addFieldValidation","cardContentUsers","SettingsAdmin","handleDisplay","CssBaseline","buttonRow","Fastfood","NaturePeople","AdminGameDataTable","gameStats","AdminGameData","gameStatsArray","row","correctCount","correct_count","numberOfInstances","number_of_instances","incorrectCount","parseFloat","toFixed","ResourceCredits","resources","createMuiTheme","typeography","overrides","MuiFormLabel","MuiCssBaseline","primary","red","A400","HowToPlay","pageNumber","checked","toHomeScreen","nextPage","in","mountOnEnter","unmountOnExit","howToDiv","header","first","second","third","fifth","App","DndProvider","backend","HTML5Backend","ThemeProvider","Container","exact","from","render","sagaMiddleware","createSagaMiddleware","middlewareList","createStore","applyMiddleware","run","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.c757ab73.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fifthHowToSlide.4eae8aab.png\";","module.exports = __webpack_public_path__ + \"static/media/firstHowToSlide.78384fb0.png\";","module.exports = __webpack_public_path__ + \"static/media/secondHowToSlide.0c080d91.png\";","module.exports = __webpack_public_path__ + \"static/media/thirdHowToSlide.e59638b2.png\";","module.exports = __webpack_public_path__ + \"static/media/fourthHowToSlide.d187aed8.png\";","import { combineReducers } from 'redux';\n\n// loginMessage holds the string that will display\n// on the login screen if there's an error\nconst loginMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_LOGIN_ERROR':\n      return '';\n    case 'LOGIN_INPUT_ERROR':\n      return 'Enter your username and password!';\n    case 'LOGIN_FAILED':\n      return 'Oops! The username and password didn\\'t match. Try again!';\n    case 'LOGIN_FAILED_NO_CODE':\n      return 'Oops! Something went wrong! Is the server running?';\n    default:\n      return state;\n  }\n};\n\n// registrationMessage holds the string that will display\n// on the registration screen if there's an error\nconst registrationMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_REGISTRATION_ERROR':\n      return '';\n    case 'REGISTRATION_INPUT_ERROR':\n      return 'Choose a username and password!';\n    case 'REGISTRATION_FAILED':\n      return 'Oops! That didn\\'t work. The username might already be taken. Try again!';\n    default:\n      return state;\n  }\n};\n\n// make one object that has keys loginMessage, registrationMessage\n// these will be on the redux state at:\n// state.errors.loginMessage and state.errors.registrationMessage\nexport default combineReducers({\n  loginMessage,\n  registrationMessage,\n});\n","const loginMode = (state = 'login', action) => {\n    switch (action.type) {\n      case 'SET_TO_LOGIN_MODE':\n        return 'login';\n      case 'SET_TO_REGISTER_MODE':\n        return 'register';\n      default:\n        return state;\n    }\n  };\n\n// loginMode will be on the redux state at:\n// state.loginMode\n  export default loginMode;\n  ","const userReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_USER':\n      return action.payload;\n    case 'UNSET_USER':\n      return {};\n    default:\n      return state;\n  }\n};\n\n// user will be on the redux state at:\n// state.user\nexport default userReducer;\n","const gameScoreReducer = (state = 0, action) => {\n    switch (action.type) {\n        case 'UPDATE_GAME_SCORE':\n            return state + 1\n        case 'RESET_GAME_SCORE':\n            return 0\n        default:\n            return state;\n    }\n}\n\nexport default gameScoreReducer;","const gameWrongAnswerReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'UPDATE_WRONG_ANSWER_ARRAY':\n            return [...state, action.payload]\n        case 'CLEAR_WRONG_ANSWERS':\n            return []\n        default:\n            return state;\n    }\n}\n\nexport default gameWrongAnswerReducer;","const leaderboard = (state = [], action) => {\n  switch (action.type) {\n    case \"SET_LEADERBOARD\":\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default leaderboard;\n","const gameItemsReducer = (state = [{}], action) => {\n    switch (action.type) {\n        case 'SET_GAME_ITEMS':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default gameItemsReducer;","const orgSettings = (state = {}, action) => {\n    switch (action.type) {\n        case 'SET_ORGANIZATION':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default orgSettings;","const teamSettings = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_TEAMS':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default teamSettings;","const contestSettings = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_CONTESTS':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default contestSettings;","const compostBinReducer = (state = true, action) => {\n    switch (action.type) {\n        case 'NO_COMPOST_BIN':\n            return false;\n        default:\n            return state;\n    }\n}\n\nexport default compostBinReducer;","const currentGameValueReducer = (state = 0, action) => {\n    switch (action.type) {\n        case 'INCREMENT_CURRENT_GAME_VALUE':\n            return state + 1;\n        case 'RESET_CURRENT_GAME_VALUE':\n            return 0;\n        default:\n            return state;\n    }\n}\n\nexport default currentGameValueReducer;","const item = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_ITEMS':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default item;","const gameTimeReducer = (state = 0, action) => {\n    switch (action.type) {\n        case 'SET_GAME_END_TIME':\n            return action.payload\n        case 'RESET_GAME_TIME':\n            return 0\n        default:\n            return state;\n    }\n}\n\nexport default gameTimeReducer;","const contestUserInfoReducer = (state=[], action) => {\n    switch (action.type) {\n        case 'SET_SCORE_PERSONAL_INFO':\n            return action.payload\n        default:\n            return state\n    }\n}\n\nexport default contestUserInfoReducer;","const contestCompostBooleanReducer = (state = ['compost': true], action) => {\n    switch (action.type) {\n        case 'SET_CONTEST_COMPOST_BOOLEAN':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default contestCompostBooleanReducer;","const correctSnackBarReducer = (state = false, action) => {\n  switch (action.type) {\n    case \"ADD_CORRECT_ANSWER\":\n      return true;\n    case \"INCREMENT_CURRENT_GAME_VALUE\":\n      return true;\n    case \"CLOSE_CORRECT_SNACK_BAR\":\n      return false;\n    default:\n      return state;\n  }\n};\n\nexport default correctSnackBarReducer;\n","const wasteWiseAdminUsers = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_ADMIN_USERS':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default wasteWiseAdminUsers;","const organizationTeamNamesReducer = (state = [{team_name: ''}], action) => {\n    switch (action.type) {\n        case 'SET_TEAM_NAMES':\n            return action.payload\n        default:\n            return state;\n    }\n}\n\nexport default organizationTeamNamesReducer;","const incorrectSnackBarReducer = (state = false, action) => {\n  switch (action.type) {\n    case \"FIRST_TRY_INCORRECT\":\n      return true;\n    case \"INCORRECT_ANSWER\":\n      return true;\n    case \"CLOSE_INCORRECT_SNACK_BAR\":\n      return false;\n    default:\n      return state;\n  }\n};\n\nexport default incorrectSnackBarReducer;\n","const animateGarbageReducer = (state = 1, action) => {\n  switch (action.type) {\n    case \"ANIMATE_GARBAGE_CORRECT\":\n      return 2;\n    case \"ANIMATE_GARBAGE_INCORRECT\":\n      return 3;\n    case \"DEANIMATE_GARBAGE\":\n      return 1;\n    default:\n      return state;\n  }\n};\n\nexport default animateGarbageReducer;\n","const animateRecycleReducer = (state = 1, action) => {\n  switch (action.type) {\n    case \"ANIMATE_RECYCLE_CORRECT\":\n      return 2;\n    case \"ANIMATE_RECYCLE_INCORRECT\":\n      return 3\n    case \"DEANIMATE_RECYCLE\":\n      return 1;\n    default:\n      return state;\n  }\n};\n\nexport default animateRecycleReducer;\n","const animateCompostReducer = (state = 1, action) => {\n  switch (action.type) {\n    case \"ANIMATE_COMPOST_CORRECT\":\n      return 2;\n    case \"ANIMATE_COMPOST_INCORRECT\":\n      return 3;\n    case \"DEANIMATE_COMPOST\":\n      return 1;\n    default:\n      return state;\n  }\n};\n\nexport default animateCompostReducer;\n","const imageUrl = (state = {}, action) => {\n    switch (action.type) {\n        case 'SET_IMAGE_URL':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default imageUrl;","const currentContestInfo = (state = {}, action) => {\n    switch (action.type) {\n        case 'SET_CURRENT_CONTEST_INFO':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default currentContestInfo;","const companyIdNumberReducer = (state = 0, action) => {\n    switch (action.type) {\n        case 'SET_COMPANY_ID':\n            return action.payload[0].id;\n        default:\n            return state;\n    }\n}\n\nexport default companyIdNumberReducer;","const teamIdNumberReducer = (state = 0, action) => {\n    switch (action.type) {\n        case 'SET_TEAM_ID_NUMBER':\n            return action.payload;\n        default:\n            return state;\n    }\n}\nexport default teamIdNumberReducer;","const adminGameStatistics = (state = [{}], action) => {\n    switch (action.type) {\n        case 'SET_GAME_STATISTICS':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default adminGameStatistics;","import { combineReducers } from 'redux';\nimport errors from './errorsReducer';\nimport loginMode from './loginModeReducer';\nimport user from './userReducer';\nimport gameScoreReducer from './gameScoreReducer';\nimport gameWrongAnswerReducer from './gameWrongAnswerReducer';\nimport leaderboardReducer from './leaderboardReducer';\nimport gameItemsReducer from './gameItemsReducer';\nimport orgSettings from './orgSettingsReducer';\nimport teamSettings from './teamSettingsReducer';\nimport contestSettings from './contestSettingsReducer';\nimport compostBinReducer from './compostBinReducer';\nimport currentGameValueReducer from './currentGameValueReducer';\nimport item from './itemReducer';\nimport gameTimeReducer from './gameTimeReducer';\nimport contestUserInfoReducer from './contestUserInfoReducer';\nimport contestCompostBooleanReducer from './contestCompostBooleanReducer';\nimport correctSnackBarReducer from './correctSnackBarReducer';\nimport wasteWiseAdminUsers from './wasteWiseAdminReducer';\nimport organizationTeamNameReducer from './organizationTeamNameReducer';\nimport incorrectSnackBarReducer from './incorrectSnackBarReducer';\nimport animateGarbageReducer from './animateGarbageReducer';\nimport animateRecycleReducer from './animateRecycleReducer';\nimport animateCompostReducer from './animateCompostReducer';\nimport imageUrlReducer from './imageUrlReducer';\nimport currentContestInfo from './currentContestInfoReducer';\nimport companyIdNumberReducer from './companyIdNumberReducer';\nimport teamIdNumberReducer from './teamIdNumberReducer';\nimport adminGameStatistics from './adminGameStatistics';\n\n// rootReducer is the primary reducer for our entire project\n// It bundles up all of the other reducers so our project can use them.\n// This is imported in index.js as rootSaga\n\n// Lets make a bigger object for our store, with the objects from our reducers.\n// This is what we get when we use 'state' inside of 'mapStateToProps'\nconst rootReducer = combineReducers({\n  errors, // contains registrationMessage and loginMessage\n  loginMode, // will have a value of 'login' or 'registration' to control which screen is shown\n  user, // will have an id and username if someone is logged in\n  gameScoreReducer, //will have score of game\n  gameWrongAnswerReducer, //array of wrong answers\n  leaderboardReducer, //list of scores to display for organization leaderboard\n  gameItemsReducer, //has list of items for game\n  orgSettings, //has data for the organization admin to edit on settings page\n  teamSettings, //has list of teams that belong to the organization on the organization's settings page\n  contestSettings, //has list of contests that belong to the organization on the organization's settings page\n  compostBinReducer, //stores whether player has compost bin or not\n  currentGameValueReducer, //stores value for knowing what index of game items array user is on\n  item,\n  gameTimeReducer, //stores value of timer after game ends\n  contestUserInfoReducer, //stores user info for contest\n  contestCompostBooleanReducer, //stores whether compost bin is in contest game\n  correctSnackBarReducer, //sets status for snack bar open/close on correct answer\n  wasteWiseAdminUsers, //retrieves the users that are admin\n  organizationTeamNameReducer, //team names for dropdown on game launch\n  incorrectSnackBarReducer, //sets status for snack bar open/close on incorrect answer\n  animateGarbageReducer, // set animation for garbage\n  animateRecycleReducer, // set animation for Recycling\n  animateCompostReducer, // set animation for compost\n  imageUrlReducer, //returns image url from AWS\n  currentContestInfo, //grabs current contest info for date/time validation\n  companyIdNumberReducer, //grabs company ID number\n  teamIdNumberReducer, //holds team id number for current player\n  adminGameStatistics, //holds game statistics\n});\n\nexport default rootReducer;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"LOGIN\" actions\nfunction* loginUser(action) {\n  try {\n    // clear any existing error on the login page\n    yield put({ type: 'CLEAR_LOGIN_ERROR' });\n\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // send the action.payload as the body\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    yield axios.post('/api/user/login', action.payload, config);\n    \n    // after the user has logged in\n    // get the user information from the server\n    yield put({type: 'FETCH_USER'});\n  } catch (error) {\n    if (error.response.status === 401) {\n      // The 401 is the error status sent from passport\n      // if user isn't in the database or\n      // if the username and password don't match in the database\n      yield put({ type: 'LOGIN_FAILED' });\n    } else {\n      // Got an error that wasn't a 401\n      // Could be anything, but most common cause is the server is not started\n      yield put({ type: 'LOGIN_FAILED_NO_CODE' });\n    }\n  }\n}\n\n// worker Saga: will be fired on \"LOGOUT\" actions\nfunction* logoutUser(action) {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // when the server recognizes the user session\n    // it will end the session\n    yield axios.post('/api/user/logout', config);\n\n    // now that the session has ended on the server\n    // remove the client-side user object to let\n    // the client-side code know the user is logged out\n    yield put({ type: 'UNSET_USER' });\n\n  } catch (error) {\n  }\n}\n\nfunction* loginSaga() {\n  yield takeLatest('LOGIN', loginUser);\n  yield takeLatest('LOGOUT', logoutUser);\n}\n\nexport default loginSaga;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"REGISTER\" actions\nfunction* registerUser(action) {\n  try {\n    // clear any existing error on the registration page\n    yield put({ type: 'CLEAR_REGISTRATION_ERROR' });\n\n    // passes the username and password from the payload to the server\n    yield axios.post('/api/user/register', action.payload);\n\n    // automatically log a user in after registration\n    yield put({ type: 'LOGIN', payload: action.payload });\n    \n    // set to 'login' mode so they see the login screen\n    // after registration or after they log out\n    yield put({type: 'SET_TO_LOGIN_MODE'});\n  } catch (error) {\n      yield put({type: 'REGISTRATION_FAILED'});\n  }\n}\n\nfunction* addWasteWiseUser(action) {\n  try {\n    let response = yield axios.post('/api/user/register/admin', action.payload)\n    yield put({\n      type: 'FETCH_WASTE_WISE_USERS',\n      payload: response.data\n    })\n  } catch (err) {\n  }\n}\n\nfunction* fetchWasteWiseUsers(action) {\n  try {\n    let response = yield axios.get('/api/user/register/admin')\n    yield put({\n      type: 'SET_ADMIN_USERS',\n      payload: response.data\n    })\n  } catch (err) {\n  }\n}\n\nfunction* deleteUser(action) {\n  try {\n    let response = yield axios.delete(`/api/user/register/${action.payload}`)\n    yield put({\n      type: 'FETCH_WASTE_WISE_USERS',\n      payload: response.data\n    })\n  } catch (err) {\n  }\n}\n\nfunction* updateUser(action) {\n  try {\n    let response = yield axios.put('/api/user/register/edit', action.payload);\n    yield put({\n      type: 'FETCH_WASTE_WISE_USERS',\n      payload: response.data\n    })\n  } catch (err) {\n  }\n}\n\nfunction* updateUserWithoutPassword(action) {\n  try {\n    let response = yield axios.put('/api/user/register/editnopassword', action.payload);\n    yield put({\n      type: 'FETCH_WASTE_WISE_USERS',\n      payload: response.data\n    })\n  } catch (err) {\n  }\n}\n\nfunction* registrationSaga() {\n  yield takeLatest('REGISTER', registerUser);\n  yield takeLatest('ADD_WASTE_WISE_USER', addWasteWiseUser);\n  yield takeLatest('FETCH_WASTE_WISE_USERS', fetchWasteWiseUsers);\n  yield takeLatest('DELETE_USER', deleteUser);\n  yield takeLatest('UPDATE_USER', updateUser);\n  yield takeLatest('UPDATE_USER_WITHOUT_PASSWORD', updateUserWithoutPassword);\n}\n\nexport default registrationSaga;\n","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on \"FETCH_USER\" actions\nfunction* fetchUser() {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // If a user is logged in, this will return their information\n    // from the server session (req.user)\n    const response = yield axios.get('/api/user', config);\n\n    // now that the session has given us a user object\n    // with an id and username set the client-side user object to let\n    // the client-side code know the user is logged in\n    yield put({ type: 'SET_USER', payload: response.data });\n  } catch (error) {\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest('FETCH_USER', fetchUser);\n}\n\nexport default userSaga;\n","import React, { Component } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = {\n    perfectText: {\n        textAlign: 'center',\n        padding: 10,\n        margin: 10\n    }\n}\nclass PerfectScore extends Component {\n    render() {\n        return (\n            <div>\n                <Typography className={this.props.classes.perfectText} variant=\"h4\" component=\"p\">\n                    CONGRATULATIONS!\n                    </Typography>\n                <Typography className={this.props.classes.perfectText} variant=\"body1\">\n                    You sorted every item into the correct bin! Play again and see if you can get another\n                    perfect score!\n                    </Typography>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles)(PerfectScore);","import React, { Component } from 'react';\nimport PerfectScore from '../PerfectScore/PerfectScore';\nimport { connect } from 'react-redux';\n\n//materialUI imports\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { withStyles } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = {\n    media: {\n        width: '100px',\n        height: '100px',\n        backgroundSize: 'contain',\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'center',\n        padding: 10,\n        margin: 'auto'\n    },\n    card: {\n        display: 'inline-block',\n        justifyContent: 'space-around',\n        maxWidth: 200,\n        width: 200,\n        height: 350,\n        maxHeight: 350,\n        margin: 15,\n    },\n    text: {\n        maxWidth: 200,\n        height: 100,\n        maxHeight: 100,\n        padding: 5,\n        textAlign: 'center'\n    },\n    itemHeader: {\n        height: 100,\n        maxHeight: 100,\n        textAlign: 'center'\n    },\n    cardBody: {\n        backgroundColor: '#eef1f1'\n    },\n    endText: {\n        textAlign: 'center',\n        padding: 10,\n        margin: 10\n    }\n}\n\nclass ResultsItemCard extends Component {\n    render() {\n        let wrongAnswerArray = [];\n        //if there were incorrect answers, map over the array they are \n        //stored in from redux and create cards to display information\n        //to user\n        //if there are no incorrect answers, render the PerfectScore component\n        if (this.props.wrongAnswers && this.props.wrongAnswers[0]) {\n            wrongAnswerArray = this.props.wrongAnswers.map(item => {\n                return (\n                    <div className={this.props.classes.card}>\n                        <Card className={this.props.classes.cardBody} >\n                            <CardHeader\n                                className={this.props.classes.itemHeader}\n                                title={item.name}\n                            />\n                            <CardContent>\n                                <CardMedia\n                                    className={this.props.classes.media}\n                                    image={item.url && item.url}\n                                />\n                                <Typography variant=\"body2\" className={this.props.classes.text} component=\"p\">\n                                    {item.item_text}\n                            </Typography>\n                            </CardContent>\n                        </Card>\n                    </div>\n                )\n            })\n        } else {\n            return <PerfectScore />\n        }\n        return (\n            <div>\n            <div>\n                <Typography className={this.props.classes.endText} variant=\"h6\">\n                    Congratulations, you did a great job! Here is some more information on the items that were sorted\n                    incorrectly. Try again and see if you can get a better score!\n                            </Typography>\n            </div>\n            <div>\n                {wrongAnswerArray && wrongAnswerArray}\n            </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (reduxStore) => {\n    return {\n        wrongAnswers: reduxStore.gameWrongAnswerReducer\n    }\n}\nexport default connect(mapStateToProps)(withStyles(styles)(ResultsItemCard));","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withStyles } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from '@material-ui/core/Grid';\n\nimport ResultsItemCard from \"../ResultsItemCard/ResultsItemCard\";\n\nconst styles = {\n    media: {\n        width: \"100px\",\n        height: \"100px\"\n    },\n    background: {\n        backgroundImage: \"url(/images/River.jpg)\",\n        backgroundSize: \"cover\",\n        backgroundPosition: \"center\",\n        height: 900,\n        padding: 24\n    },\n    scoreText: {\n        padding: 10,\n        margin: 10\n    },\n    playAgainButton: {\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    resultsDiv: {\n        backgroundColor: 'lightgrey',\n        opacity: .8,\n    },\n    leaderboardButton: {\n        display: 'flex',\n        margin: 'auto'\n    },\n    leaderboardview: {\n        textAlign: 'center',\n        marginBottom: 10\n    },\n    playAgain: {\n        marginBottom: '30px'\n    }\n};\n\nclass ResultsGuestPlayer extends Component {\n\n    componentWillUnmount() {\n        this.props.history.location.search && this.sendContestGameData()\n        this.props.dispatch({\n            type: \"RESET_CURRENT_GAME_VALUE\"\n        });\n        this.props.dispatch({\n            type: 'RESET_GAME_TIME'\n        });\n        this.props.dispatch({\n            type: 'RESET_GAME_SCORE'\n        });\n        this.props.dispatch({\n            type: 'CLEAR_WRONG_ANSWERS'\n        });\n    }\n\n    sendContestGameData = () => {\n        this.props.dispatch({\n            type: 'SEND_CONTEST_GAME_DATA',\n            payload: {\n                firstName: this.props.contestUserInfo.firstName,\n                lastName: this.props.contestUserInfo.lastName,\n                email: this.props.contestUserInfo.email,\n                score: this.props.gameScore,\n                time: this.props.gameTime,\n                contestIdNumber: this.props.reduxStore.currentContestInfo.id,\n                organizationIdNumber: this.props.reduxStore.currentContestInfo.organization_id,\n                teamIdNumber: this.props.teamIdNumber.id ? this.props.teamIdNumber.id : 0\n            }\n        })\n    }\n\n    playAgain = () => {\n        //if they are a contest player with search params, push to gamelaunch with those params\n        //or push to regular gamelaunch page if not\n        if (this.props.history.location.search) {\n            this.props.history.push(`/gamelaunch${this.props.history.location.search}`)\n        } else {\n            this.props.history.push(\"/gamelaunch\");\n        }\n    };\n\n    handleLeaderboardClick = () => {\n        this.props.history.push(`/leaderboard${this.props.history.location.search}`)\n    }\n\n\n    render() {\n        \n        const scorePercentage = parseInt((this.props.gameScore / 15) * 100);\n        return (\n            <div>\n                <div className={this.props.classes.resultsDiv}>\n                    <div>\n                        <Grid\n                            container\n                            justify={\"space-evenly\"}\n                            spacing={24}\n                            alignItems={\"center\"}\n                        >\n                            <div>\n                                <Typography className={this.props.classes.scoreText} variant='h3'>\n                                    SCORE: {this.props.gameWrongAnswers.length === undefined ? 15 : 15 - this.props.gameWrongAnswers.length}/15 - {parseInt(((15 - this.props.gameWrongAnswers.length) / 15) * 100)}%\n                    </Typography>\n                            </div>\n                            <div>\n                                <Typography className={this.props.classes.scoreText} variant='h3'>\n                                    TIME: {this.props.gameTime}\n                                </Typography>\n                            </div>\n                        </Grid>\n                    </div>\n                    <div>\n                        {this.props.history.location.search &&\n                            <div>\n                                <Typography className={this.props.classes.leaderboardview} variant='h5'>\n                                    VIEW THE CONTEST LEADERBOARD\n                                </Typography>\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    className={this.props.classes.leaderboardButton}\n                                    onClick={() => this.handleLeaderboardClick()}\n                                >CONTEST LEADERBOARD\n                                </Button>\n                            </div>}\n                    </div>\n                    <div>\n                        <ResultsItemCard />\n                    </div>\n\n                    <div className={this.props.classes.playAgainButton}>\n                        <Button className={this.props.classes.playAgain} onClick={() => this.playAgain()} variant='contained' color='primary'>\n                            CLICK HERE TO PLAY AGAIN\n                    </Button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = reduxStore => {\n    return {\n        gameScore: reduxStore.gameScoreReducer,\n        gameWrongAnswers: reduxStore.gameWrongAnswerReducer,\n        gameTime: reduxStore.gameTimeReducer,\n        contestUserInfo: reduxStore.contestUserInfoReducer,\n        organizationInfo: reduxStore.organizationTeamNameReducer,\n        contestInfo: reduxStore.contestCompostBooleanReducer,\n        teamIdNumber: reduxStore.teamIdNumberReducer,\n        reduxStore,\n    };\n};\n\nexport default connect(mapStateToProps)(withStyles(styles)(ResultsGuestPlayer));\n","import { put, takeEvery } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport ResultsGuestPlayer from \"../../components/ResultsGuestPlayer/ResultsGuestPlayer\";\n\n\nfunction* addWrongAnswer(action) {\n  try {\n    yield put({\n      type: \"UPDATE_WRONG_ANSWER_ARRAY\",\n      payload: action.payload\n    });\n  } catch (error) {\n  }\n}\n\nfunction* fetchGameItems(action) {\n  try {\n    const response = yield axios.get(`/api/item`);\n    yield put({\n      type: \"SET_GAME_ITEMS\",\n      payload: response.data\n    });\n  } catch (error) {\n  }\n}\n\nfunction* firstTryCorrect(action) {\n  try {\n    yield axios.put(`/api/item/correct`, action.payload);\n    yield put({\n      type: \"ADD_CORRECT_ANSWER\"\n    });\n    yield put({\n      type: \"UPDATE_GAME_SCORE\"\n    });\n  } catch (error) {\n  }\n}\n\nfunction* firstTryIncorrect(action) {\n  try {\n    yield axios.put(`/api/item/incorrect`, action.payload);\n  } catch (error) {\n  }\n}\n\nfunction* getContestCompostBoolean(action) {\n  try {\n    let id = action.payload\n    const response = yield axios.get(`/api/contest/compost/${id}`)\n    yield put ({\n      type: 'SET_CONTEST_COMPOST_BOOLEAN',\n      payload: response.data\n    })\n  } catch (error) {\n  }\n}\n\nfunction* getTeamNames(action) {\n  try {\n    let id = action.payload\n    const response = yield axios.get(`/api/team/names/${id}`)\n    yield put ({\n      type: 'SET_TEAM_NAMES',\n      payload: response.data\n    })\n  } catch (error) {\n  }\n}\n\nfunction* fetchCurrentContestInfo(action) {\n  try {\n    let response = yield axios.get(`/api/contest/currentcontest/${action.payload}`)\n    yield put({\n      type: 'SET_CURRENT_CONTEST_INFO',\n      payload: response.data[0]\n    })\n  } catch (err) {\n  }\n}\n\nfunction* gameSaga() {\n  yield takeEvery(\"FETCH_GAME_ITEMS\", fetchGameItems);\n  yield takeEvery(\"ADD_WRONG_ANSWER\", addWrongAnswer);\n  yield takeEvery(\"FIRST_TRY_CORRECT\", firstTryCorrect);\n  yield takeEvery(\"FIRST_TRY_INCORRECT\", firstTryIncorrect);\n  yield takeEvery('GET_CONTEST_COMPOST_BOOLEAN', getContestCompostBoolean);\n  yield takeEvery('GET_TEAM_NAMES', getTeamNames);\n  yield takeEvery('FETCH_CURRENT_CONTEST_INFO', fetchCurrentContestInfo);\n}\n\nexport default gameSaga;\n","import axios from \"axios\";\nimport { put, takeEvery } from \"redux-saga/effects\";\n\nfunction* getLeaderboard(action) {\n  try {\n    let response = yield axios.get(`api/score/leaderboard/${action.payload}`);\n    yield put({\n      type: \"SET_LEADERBOARD\",\n      payload: response.data\n    });\n  } catch (error) {\n  }\n}\n\nfunction* sendContestGameData(action) {\n  try {\n    yield axios.post(`api/score`, action.payload);\n  } catch (error) {\n  }\n}\n\nfunction* getCompanyId(action) {\n  try {\n    let response = yield axios.get(`api/score/leaderboard/company/${action.payload}`);\n    yield put({\n      type: \"SET_COMPANY_ID\",\n      payload: response.data\n    });\n  } catch (error) {\n  }\n}\n\nfunction* fetchTeamIdNumber(action) {\n  const params = Object.keys(action.payload).map(key => key + '=' + action.payload[key]).join('&');\n  try {\n    const response = yield axios.get(`api/team/idnumber/${params}`);\n    yield put({\n      type: 'SET_TEAM_ID_NUMBER',\n      payload: response.data\n    });\n  } catch (error) {\n  }\n}\n\n\n\nfunction* watchMe() {\n  yield takeEvery(\"FETCH_LEADERBOARD\", getLeaderboard);\n  yield takeEvery('SEND_CONTEST_GAME_DATA', sendContestGameData);\n  yield takeEvery('GET_COMPANY_ID', getCompanyId);\n  yield takeEvery('FETCH_TEAM_ID_NUMBER', fetchTeamIdNumber);\n}\n\nexport default watchMe;\n","import { put, takeEvery } from 'redux-saga/effects';\nimport axios from \"axios\";\n\nfunction* fetchOrganization(action) {\n    try {\n        let response = yield axios.get('/api/organization')\n        yield put ({\n            type: 'SET_ORGANIZATION',\n            payload: response.data[0]\n        })\n    } catch (err) {\n    }\n}\n\nfunction* updateOrganizationName(action) {\n    try {\n        let response = yield axios.put('/api/organization/organizationName', action.payload);\n        yield put({\n            type: 'FETCH_ORGANIZATION',\n            payload: response.data\n        })\n    } catch (err) {\n    }\n}\n\nfunction* fetchTeams(action) {\n    try {\n        let response = yield axios.get('/api/team')\n        yield put({\n            type: 'SET_TEAMS',\n            payload: response.data\n        })\n    } catch (err) {\n    }\n}\n\nfunction* updateTeam(action) {\n    try {\n        let response = yield axios.put('/api/team/teamName', action.payload);\n        yield put({\n            type: 'FETCH_TEAMS',\n            payload: response.data\n        })\n    } catch (err) {\n    }\n}\n\nfunction* deleteTeam(action) {\n    try {\n        let response = yield axios.delete(`/api/team/${action.payload}`)\n        yield put({\n            type: 'FETCH_TEAMS',\n            payload: response.data\n        })\n    } catch (err) {\n    }\n}\n\nfunction* addTeam(action) {\n    try {\n        let response = yield axios.post('/api/team', action.payload)\n        yield put({\n            type: 'FETCH_TEAMS',\n            payload: response.data\n        })\n    } catch (err) {\n    }\n}\n\nfunction* fetchContests(action) {\n    try {\n        let response = yield axios.get('/api/contest')\n        yield put({\n            type: 'SET_CONTESTS',\n            payload: response.data\n        })\n    } catch (err) {\n    }\n}\n\nfunction* updateContest(action) {\n    try {\n        let response = yield axios.put('/api/contest', action.payload);\n        yield put({\n            type: 'FETCH_CONTESTS',\n            payload: response.data\n        })\n    } catch (err) {\n    }\n}\n\nfunction* deleteContest(action) {\n    try {\n        let response = yield axios.delete(`/api/contest/${action.payload}`)\n        yield put({\n            type: 'FETCH_CONTESTS',\n            payload: response.data\n        })\n    } catch (err) {\n    }\n}\n\nfunction* addContest(action) {\n    try {\n        let response = yield axios.post('/api/contest/add', action.payload)\n        yield put({\n            type: 'FETCH_CONTESTS',\n            payload: response.data\n        })\n    } catch (err) {\n    }\n}\n\nfunction* orgSettingsSaga() {\n    yield takeEvery('FETCH_ORGANIZATION', fetchOrganization);\n    yield takeEvery('UPDATE_ORGANIZATION_NAME', updateOrganizationName);\n    yield takeEvery('FETCH_TEAMS', fetchTeams);\n    yield takeEvery('UPDATE_TEAM', updateTeam)\n    yield takeEvery('UPDATE_TEAM', updateTeam);\n    yield takeEvery('DELETE_TEAM', deleteTeam);\n    yield takeEvery('ADD_TEAM', addTeam);\n    yield takeEvery('FETCH_CONTESTS', fetchContests);\n    yield takeEvery('UPDATE_CONTEST', updateContest);\n    yield takeEvery('DELETE_CONTEST', deleteContest);\n    yield takeEvery('ADD_CONTEST', addContest);\n}\n\nexport default orgSettingsSaga;","import { put, takeEvery } from 'redux-saga/effects';\nimport axios from \"axios\";\n\nfunction* fetchItems(action) {\n    try {\n        let response = yield axios.get('/api/item/admin')\n        yield put({\n            type: 'SET_ITEMS',\n            payload: response.data\n        })\n    } catch (err) {\n    }\n}\n\nfunction* fetchGameStatistics(action) {\n    try {\n        let response = yield axios.get('/api/item/statistics')\n        yield put({\n            type: 'SET_GAME_STATISTICS',\n            payload: response.data\n        })\n    } catch (error) {\n    }\n}\n\nfunction* addItem(action) {\n    try {\n        let response = yield axios.post('/api/item/admin', action.payload)\n        yield put({\n            type: 'FETCH_ITEMS',\n            payload: response.data\n        })\n    } catch (err) {\n    }\n}\n\nfunction* deleteItem(action) {\n    try {\n        let response = yield axios.delete(`/api/item/admin/${action.payload}`)\n        yield put({\n            type: 'FETCH_ITEMS',\n            payload: response.data\n        })\n    } catch (err) {\n    }\n}\n\nfunction* uploadImage(action) {\n    try {\n        let response = yield axios.post('/api/item/admin/upload', action.payload)\n        yield put({\n            type: 'FETCH_ITEMS',\n            payload: response.data\n        })\n    } catch (err) {\n    }\n}\n\nfunction* updateItem(action) {\n    try {\n        let response = yield axios.put('/api/item/admin', action.payload);\n        yield put({\n            type: 'FETCH_ITEMS',\n            payload: response.data\n        })\n    } catch (err) {\n    }\n}\n\nfunction* addItemImage(action) {\n    try {\n        if (action.payload.file !== null) {\n            let file = action.payload.file;\n            let fileParts = file.name.split('.');\n            let fileName = fileParts[0];\n            let fileType = fileParts[1];\n            let awsSignedResponse = yield axios.post('/api/aws', {\n                fileName: fileName,\n                fileType: fileType\n            });\n            const returnData = awsSignedResponse.data.data.returnData;\n            const signedRequest = returnData.signedRequest;\n            const url = returnData.url;\n            action.payload.attachment_url = url;\n            yield axios.put(signedRequest, action.payload.file, {\n                headers: {\n                    'Content-Type': action.payload.fileType\n                }\n            });\n            yield put({\n                type: 'SET_IMAGE_URL',\n                payload: url\n            })\n            // yield put ({\n            //     type: 'FETCH_IMAGE_URL'\n            // })\n        }\n    } catch (error) {\n    }\n}\n\nfunction* itemSaga() {\n    yield takeEvery('FETCH_ITEMS', fetchItems);\n    yield takeEvery('ADD_ITEM', addItem);\n    yield takeEvery('DELETE_ITEM', deleteItem);\n    yield takeEvery('UPLOAD_IMAGE', uploadImage);\n    yield takeEvery('UPDATE_ITEM', updateItem);\n    yield takeEvery('ADD_ITEM_IMAGE', addItemImage);\n    yield takeEvery('FETCH_GAME_STATISTICS', fetchGameStatistics);\n}\n\nexport default itemSaga;","import { all } from 'redux-saga/effects';\nimport loginSaga from './loginSaga';\nimport registrationSaga from './registrationSaga';\nimport userSaga from './userSaga';\nimport gameSaga from './gameSaga';\nimport leaderBoardSaga from './leaderboardSaga';\nimport orgSettingsSaga from './orgSettingsSaga';\nimport itemSaga from './itemSaga.js';\n\n// rootSaga is the primary saga.\n// It bundles up all of the other sagas so our project can use them.\n// This is imported in index.js as rootSaga\n\n// some sagas trigger other sagas, as an example\n// the registration triggers a login\n// and login triggers setting the user\nexport default function* rootSaga() {\n  yield all([\n    loginSaga(),\n    registrationSaga(),\n    userSaga(),\n    gameSaga(),\n    leaderBoardSaga(),\n    orgSettingsSaga(),\n    itemSaga()\n  ]);\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\n//Material UI Components\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Typography from \"@material-ui/core/Typography\";\nimport \"./Nav.css\";\nimport { withStyles } from \"@material-ui/styles\";\n\n// Icons and Logos for the App. Found on the Nav Bar. \nimport mainlogo from \"../../img/WasteWiselogo.jpg\"\nimport Icon from \"@mdi/react\";\nimport { mdiDoorOpen } from \"@mdi/js\";\nimport { mdiGamepadSquare } from \"@mdi/js\";\nimport { mdiSettingsBox } from \"@mdi/js\";\nimport { mdiHelpCircle } from \"@mdi/js\";\nimport { mdiAccountPlus } from \"@mdi/js\";\nimport { mdiDoorClosedLock } from \"@mdi/js\";\nimport { mdiTableLarge } from '@mdi/js';\n\n\nfunction TabContainer(props) {\n  return (\n    <Typography component=\"div\" style={{ padding: 8 * 3 }}>\n      {props.children}\n    </Typography>\n  );\n}\n\nTabContainer.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\n//styling\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    width: \"100%\",\n    backgroundColor: theme.palette.background.paper\n  }\n});\n\nclass Nav extends React.Component {\n  state = {\n    value: 0\n  };\n  \n  componentDidMount() {\n    this.handleSetDefaultValue();\n  }\n\n  handleChange = (event, value) => {\n    this.setState({ value });\n  };\n// conditional rendering the view of the nav bar with the icon tab associated with.\n  handleSetDefaultValue() {\n    if (window.location.href.includes(\"home\")) {\n      this.setState({\n        value: 4\n      });\n    } else if (window.location.href.includes(\"login\")) {\n      this.setState({\n        value: 4\n      });\n      } else if (window.location.href.includes(\"settingsorg\")) {\n      this.setState({\n        value: 1\n      });\n    } else if (window.location.href.includes(\"settingsadmin\")) {\n      this.setState({\n        value: 1\n      });\n      } else if (window.location.href.includes(\"game\")) {\n      this.setState({\n        value: 1\n      });\n    } else if (window.location.href.includes(\"resources\")) {\n      this.setState({\n        value: 2\n      });\n      } else if (window.location.href.includes(\"register\")) {\n      this.setState({\n        value: 3\n      });\n    } else {\n      this.setState({\n        value: false\n      });\n    }\n  }\n// below is the app bar which houses all the navigational choices that a user can see , an admin user can see , and an organization can. \n  render() {\n    const { classes } = this.props;\n    const { value } = this.state;\n\n    return (\n      <div className={classes.root}>\n        <AppBar position=\"static\" color=\"#EEF1F1\">\n          <Tabs\n            value={value}\n            onChange={this.handleChange}\n            variant=\"scrollable\"\n            scrollButtons=\"on\"\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n          >\n            {/* <Tab label=\"Know What to Throw\" /> */}\n            <img src={mainlogo} style={{width: 150, height: 100}}/>\n            {/* /Users/maxmaher/Documents/prime/tier3/GROUP-PROJECT/waste-wise-game/src/components/Nav/NavGuest.js */}\n            {/* /Users/maxmaher/Documents/prime/tier3/GROUP-PROJECT/waste-wise-game/src/img/WasteWiselogo.png */}\n            {/* <span>Know What to Throw</span> */}\n            {!this.props.user.id && (\n              <Tab\n                label=\"PLAY\"\n                component={Link}\n                to={this.props.state.currentContestInfo.access_code ? (`/gamelaunch?contest=${this.props.state.currentContestInfo.access_code}`)\n               : (\"/gamelaunch\")}\n                icon={\n                  <Icon\n                    path={mdiGamepadSquare}\n                    title=\"Play\"\n                    size={2}\n                    horizontal\n                    rotate={360}\n                    color=\"green\"\n                  />\n                }\n              />\n            )}\n            {this.props.user.wastewise_admin && (\n              <Tab\n                label=\"Settings\"\n                component={Link}\n                to=\"/settingsadmin\"\n                icon={\n                  <Icon\n                    path={mdiSettingsBox}\n                    title=\"Settings\"\n                    size={2}\n                    horizontal\n                    rotate={360}\n                    color=\"green\"\n                  />\n                }\n              />\n            )}\n            {this.props.user.wastewise_admin && (\n              <Tab\n                label=\"Data\"\n                component={Link}\n                to=\"/admingamedata\"\n                icon={\n                  <Icon\n                    path={mdiTableLarge}\n                    title=\"Data\"\n                    size={2}\n                    horizontal\n                    rotate={360}\n                    color=\"green\"\n                  />\n                }\n              />\n            )}\n            {this.props.user.id && !this.props.user.wastewise_admin && (\n              <Tab\n                label=\"Settings\"\n                component={Link}\n                to=\"/settingsorg\"\n                icon={\n                  <Icon\n                    path={mdiSettingsBox}\n                    title=\"Settings\"\n                    size={2}\n                    horizontal\n                    rotate={360}\n                    color=\"green\"\n                  />\n                }\n              />\n            )}\n            \n            <Tab\n              label=\"Resources\"\n              component={Link}\n              to=\"/resources\"\n              icon={\n                <Icon\n                  path={mdiHelpCircle}\n                  title=\"Resources\"\n                  size={2}\n                  rotate={360}\n                  color=\"green\"\n                />\n              }\n            />\n            {!this.props.user.id && (\n              <Tab\n                label=\"REGISTER\"\n                component={Link}\n                to=\"/register\"\n                icon={\n                  <Icon\n                    path={mdiAccountPlus}\n                    title=\"Register\"\n                    size={2}\n                    horizontal\n                    rotate={360}\n                    color=\"green\"\n                  />\n                }\n              />\n            )}\n            {this.props.user.id && (\n              <Tab\n                onClick={() => this.props.dispatch({ type: \"LOGOUT\" })}\n                label=\"LOGOUT\"\n                to=\"/home\"\n                icon={\n                  <Icon\n                    path={mdiDoorClosedLock}\n                    title=\"Logout\"\n                    size={2}\n                    horizontal\n                    rotate={360}\n                    color=\"green\"\n                  />\n                }\n              />\n            )}\n            {!this.props.user.id && (\n              <Tab\n                label=\"LOGIN\"\n                component={Link}\n                to=\"/home\"\n                icon={\n                  <Icon\n                    path={mdiDoorOpen}\n                    title=\"Login\"\n                    size={2}\n                    horizontal\n                    rotate={360}\n                    color=\"green\"\n                  />\n                }\n              />\n            )}\n          </Tabs>\n        </AppBar>\n      </div>\n    );\n  }\n}\n\nNav.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  state,\n  user: state.user\n});\n\nexport default connect(mapStateToProps)(withStyles(styles)(Nav));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from \"react-router-dom\";\n\n//Material UI Components\nimport { Box, Card, CardContent, Grid, TextField, Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\n\n//styling \nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  card: {\n    textAlign: 'center',\n    background: '#EEF1F1',\n    color: 'black',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  login: {\n    width: 300,\n    '&:hover:not($disabled):not($cssFocused):not($error) $notchedOutline': {\n      borderColor: \"black\"\n    }\n  },\n  input: {\n    color: \"black\"\n  },\n\n  cssLabel: {\n    '&$cssFocused': {\n      color: \"black\",\n    },\n  },\n  cssOutlinedInput: {\n    '&$cssFocused $notchedOutline': {\n      borderColor: \"black\",\n    },\n  },\n  cssFocused: {},\n  notchedOutline: { borderColor: \"black\" },\n  h1: {\n    color: \"black\"\n  }\n});\n\n//login page for a user who has registered and now will be able to access the further settings pages of their organization\n//if the user is an admin then they will be shown their admin settings.\nclass LoginPage extends Component {\n\n  state = {\n    username: '',\n    password: '',\n  };\n\n  login = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'LOGIN',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({ type: 'LOGIN_INPUT_ERROR' });\n    }\n  } // end login\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n\n    const { classes } = this.props\n\n    return (\n\n      <body>\n        <Box textAlign=\"center\">\n          <div style={{ marginTop: 90, padding: 30 }}>\n            <Grid container spacing={2} justify=\"center\" style={{ marginTop: 6 }}>\n              <Grid item sm={5}>\n                <Card style={{ backgroundColor: \"#EEF1F1\" }}>\n                  <CardContent>\n                    {this.props.errors.loginMessage && (\n                      <h2\n                        className=\"alert\"\n                        role=\"alert\"\n                      >\n                        {this.props.errors.loginMessage}\n                      </h2>\n                    )}\n                    <form onSubmit={this.login}>\n                      <h1 className={classes.h1}>Know What to Throw</h1>\n                      <div>\n                        <TextField\n                          align=\"left\"\n                          id=\"outlined-name\"\n                          label=\"email\"\n                          className={classes.login}\n                          value={this.state.username}\n                          onChange={this.handleInputChangeFor('username')}\n                          margin=\"normal\"\n                          variant=\"outlined\"\n                          InputProps={{\n                            className: classes.input,\n                            classes: {\n                              root: classes.cssOutlinedInput,\n                              focused: classes.cssFocused,\n                              notchedOutline: classes.notchedOutline,\n                            }\n                          }}\n                          InputLabelProps={{\n                            className: classes.input,\n                            shrink: true\n                          }}\n                        />\n                      </div>\n                      <div>\n                        <TextField\n                          type=\"password\"\n                          align=\"left\"\n                          id=\"outlined-name\"\n                          label=\"password\"\n                          className={classes.login}\n                          value={this.state.password}\n                          onChange={this.handleInputChangeFor('password')}\n                          margin=\"normal\"\n                          variant=\"outlined\"\n                          InputProps={{\n                            className: classes.input,\n                            classes: {\n                              root: classes.cssOutlinedInput,\n                              focused: classes.cssFocused,\n                              notchedOutline: classes.notchedOutline,\n                            }\n                          }}\n                          InputLabelProps={{\n                            className: classes.input,\n                            shrink: true\n                          }}\n                        />\n                      </div>\n                      <div style={{ marginTop: 10 }}>\n                        <Button variant=\"contained\" color=\"primary\" type=\"submit\" name=\"submit\" value=\"Login\">\n                          Login\n                      </Button>\n                      </div>\n                    </form>\n                  </CardContent>\n                </Card>\n              </Grid>\n            </Grid>\n          </div>\n        </Box>\n      </body>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default withRouter(connect(mapStateToProps)(withStyles(styles)(LoginPage)));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from \"react-router-dom\";\n\n//Material UI Components\nimport { Button, Box, Card, CardContent, FormControl, FormControlLabel, FormHelperText, FormLabel, Grid, MenuItem, Radio, RadioGroup, TextField, Typography } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\n\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  card: {\n    textAlign: 'center',\n    background: '#494A49',\n    color: 'black',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  fieldMedium: {\n    margin: 5,\n    width: 240,\n    '&:hover:not($disabled):not($cssFocused):not($error) $notchedOutline': {\n      borderColor: \"black\"\n    }\n  },\n  fieldLarge: {\n    margin: 5,\n    width: 490,\n    '&:hover:not($disabled):not($cssFocused):not($error) $notchedOutline': {\n      borderColor: \"black\"\n    }\n  },\n  question: {\n    fontSize: 20\n  },\n  radio: {\n    margin: theme.spacing(3)\n  },\n  input: {\n    color: \"black\"\n  },\n  cssLabel: {\n    '&$cssFocused': {\n      color: \"black\",\n    },\n  },\n  cssOutlinedInput: {\n    '&$cssFocused $notchedOutline': {\n      borderColor: \"black\",\n    },\n  },\n  cssFocused: {},\n  notchedOutline: { borderColor: \"black\" },\n  h1: {\n    color: \"#55d685\"\n  }\n}\n)\n\nclass RegisterPage extends Component {\n  state = {\n    firstName: \"\",\n    lastName: \"\",\n    username: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    organizationName: \"\",\n    contestName: \"\",\n    compostBin: \"\",\n    contestStartDate: \"\",\n    contestStartTime: \"\",\n    contestEndDate: \"\",\n    contestEndTime: \"\",\n    accessCode: \"\"\n  };\n\n  //checking the form and if any input field is left blank then alert asking the user to input the field to continue\n  fieldValidation = event => {\n    event.preventDefault();\n\n    if (!this.state.firstName) {\n      alert(\"Please enter a value for First Name.\");\n      return false;\n    }\n    if (!this.state.lastName) {\n      alert(\"Please enter a value for Last Name.\");\n      return false;\n    }\n    if (!this.state.username) {\n      alert(\"Please enter a value for Email Address.\");\n      return false;\n    }\n    if (!this.state.password) {\n      alert(\"Please enter a value for Password.\");\n      return false;\n    }\n    if (!this.state.confirmPassword) {\n      alert(\"Please enter a value for Confirm Password.\");\n      return false;\n    }\n    if (!this.state.organizationName) {\n      alert(\"Please enter a value for Organization Name.\");\n      return false;\n    }\n    if (!this.state.contestName) {\n      alert(\"Please enter a value for Contest Name.\");\n      return false;\n    }\n    if (this.state.compostBin === \"\") {\n      alert(\"Please select whether a Compost Bin will be used.\");\n      return false;\n    }\n    if (!this.state.contestStartDate) {\n      alert(\"Please enter a value for Contest Start Date.\");\n      return false;\n    }\n    if (!this.state.contestStartTime) {\n      alert(\"Please enter a value for Contest Start Time.\");\n      return false;\n    }\n    if (!this.state.contestEndDate) {\n      alert(\"Please enter a value for Contest End Date.\");\n      return false;\n    }\n    if (!this.state.contestEndTime) {\n      alert(\"Please enter a value for Contest End Time.\");\n      return false;\n    }\n    if (this.state.password.length < 8) {\n      alert(\"Please ensure your password is at least eight characters.\");\n      return false;\n    }\n    if (this.state.password !== this.state.confirmPassword) {\n      alert(\"The passwords do not match.  Please try again.\");\n      return false;\n    }\n\n    this.registerUser();\n  };\n\n  //take all of the input from the register form and stow that in the database as a user who is now registered. \n  registerUser() {\n    this.generateAccessId();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: \"REGISTER\",\n        payload: {\n          firstName: this.state.firstName,\n          lastName: this.state.lastName,\n          username: this.state.username,\n          password: this.state.password,\n          organizationName: this.state.organizationName,\n          contestName: this.state.contestName,\n          compostBin: this.state.compostBin,\n          contestStartDate: this.state.contestStartDate,\n          contestStartTime: this.state.contestStartTime,\n          contestEndDate: this.state.contestEndDate,\n          contestEndTime: this.state.contestEndTime,\n          accessCode: this.state.accessCode\n        }\n      });\n\n      this.props.history.push('/settingsorg')\n      \n    } else {\n      this.props.dispatch({ type: \"REGISTRATION_INPUT_ERROR\" });\n    }\n  } // end registerUser\n\n  handleInputChangeFor = propertyName => event => {\n    this.setState({\n      [propertyName]: event.target.value\n    });\n  };\n  // generates the code for the contest that is associated with the Organization. \n  generateAccessId() {\n    this.state.accessCode = Math.floor(Math.random() * 900000000) + 100000000;\n  }\n\n  passwordValidation() {\n    if (this.state.password.length < 8) {\n      alert(\"Please ensure your password is at least eight characters.\");\n      return false;\n    }\n    if (this.state.password !== this.state.confirmPassword) {\n      alert(\"The passwords do not match.  Please try again.\");\n      return false;\n    }\n  }\n\n  toLogin = () => {\n    this.props.history.push(`/home`); // brings the user to login\n  };\n\n  render() {\n    const { classes } = this.props;\n\n    let hourSelection = [];\n\n    for (let i = 0; i < 24; i++) {\n      let hourFormat = {\n        displayValue: 0,\n        sqlValue: 0\n      };\n      hourFormat.sqlValue = i;\n      if (i == 0) {\n        hourFormat.displayValue = \"12 am\";\n        hourSelection.push(hourFormat);\n      } else if (i < 12) {\n        hourFormat.displayValue = i + \" am\";\n        hourSelection.push(hourFormat);\n      } else if (i == 12) {\n        hourFormat.displayValue = \"12 pm\";\n        hourSelection.push(hourFormat);\n      } else if (i <= 23) {\n        let j = i;\n        hourFormat.displayValue = j - 12 + \" pm\";\n        hourSelection.push(hourFormat);\n      }\n    }\n\n    return (\n      <Box textAlign=\"center\">\n        <div className={classes.root} style={{ marginTop: 25, padding: 30 }}>\n          <Grid container spacing={2} justify=\"center\">\n            <Grid item sm={8}>\n              <Card>\n                <CardContent>\n                  <span className={classes.question}>\n                    <b>Invited to play?</b>\n                  </span>\n                  <br />\n                  There's no need to register! Please use the link provided by\n                  your organization.\n                  <br />\n                  <br />\n                  <span className={classes.question}>\n                    <b>Represent an organization?</b>\n                  </span>\n                  <br />\n                  You're in the right place! Register for an account to begin\n                  setting up your contest.\n                </CardContent>\n              </Card>\n            </Grid>\n          </Grid>\n          <Grid\n            container\n            spacing={2}\n            justify=\"center\"\n            style={{ marginTop: 10 }}\n          >\n            <Grid item sm={8}>\n              <Card>\n                <CardContent style={{ backgroundColor: \"#EEF1F1\" }}>\n                  {this.props.errors.registrationMessage && (\n                    <h2 className=\"alert\" role=\"alert\">\n                      {this.props.errors.registrationMessage}\n                    </h2>\n                  )}\n                  <form onSubmit={this.fieldValidation}>\n                    <h1>Organization Registration</h1>\n                    <h3>Your Information</h3>\n                    <div>\n                      <TextField\n                        align=\"left\"\n                        id=\"outlined-name\"\n                        label=\"first name\"\n                        className={classes.fieldMedium}\n                        value={this.state.firstName}\n                        onChange={this.handleInputChangeFor(\"firstName\")}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        InputProps={{\n                          className: classes.input,\n                          classes: {\n                            root: classes.cssOutlinedInput,\n                            focused: classes.cssFocused,\n                            notchedOutline: classes.notchedOutline\n                          }\n                        }}\n                        InputLabelProps={{\n                          className: classes.input,\n                          shrink: true\n                        }}\n                      />\n                      <TextField\n                        align=\"left\"\n                        id=\"outlined-name\"\n                        label=\"last name\"\n                        className={classes.fieldMedium}\n                        value={this.state.lastName}\n                        onChange={this.handleInputChangeFor(\"lastName\")}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        InputProps={{\n                          className: classes.input,\n                          classes: {\n                            root: classes.cssOutlinedInput,\n                            focused: classes.cssFocused,\n                            notchedOutline: classes.notchedOutline\n                          }\n                        }}\n                        InputLabelProps={{\n                          className: classes.input,\n                          shrink: true\n                        }}\n                      />\n                    </div>\n\n                    <div>\n                      <TextField\n                        align=\"left\"\n                        id=\"outlined-name\"\n                        label=\"email address\"\n                        className={classes.fieldLarge}\n                        value={this.state.username}\n                        onChange={this.handleInputChangeFor(\"username\")}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        InputProps={{\n                          className: classes.input,\n                          classes: {\n                            root: classes.cssOutlinedInput,\n                            focused: classes.cssFocused,\n                            notchedOutline: classes.notchedOutline\n                          }\n                        }}\n                        InputLabelProps={{\n                          className: classes.input,\n                          shrink: true\n                        }}\n                      />\n                    </div>\n\n                    <div>\n                      <TextField\n                        type=\"password\"\n                        align=\"left\"\n                        id=\"outlined-name\"\n                        label=\"password\"\n                        className={classes.fieldMedium}\n                        value={this.state.password}\n                        onChange={this.handleInputChangeFor(\"password\")}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        InputProps={{\n                          className: classes.input,\n                          classes: {\n                            root: classes.cssOutlinedInput,\n                            focused: classes.cssFocused,\n                            notchedOutline: classes.notchedOutline\n                          }\n                        }}\n                        InputLabelProps={{\n                          className: classes.input,\n                          shrink: true\n                        }}\n                      />\n                      <TextField\n                        type=\"password\"\n                        align=\"left\"\n                        id=\"outlined-name\"\n                        label=\"confirm password\"\n                        className={classes.fieldMedium}\n                        value={this.state.confirmPassword}\n                        onChange={this.handleInputChangeFor(\"confirmPassword\")}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        InputProps={{\n                          className: classes.input,\n                          classes: {\n                            root: classes.cssOutlinedInput,\n                            focused: classes.cssFocused,\n                            notchedOutline: classes.notchedOutline\n                          }\n                        }}\n                        InputLabelProps={{\n                          className: classes.input,\n                          shrink: true\n                        }}\n                      />\n                    </div>\n                    <div>\n                      <TextField\n                        align=\"left\"\n                        id=\"outlined-name\"\n                        label=\"organization name\"\n                        className={classes.fieldLarge}\n                        value={this.state.organizationName}\n                        onChange={this.handleInputChangeFor(\"organizationName\")}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        InputProps={{\n                          className: classes.input,\n                          classes: {\n                            root: classes.cssOutlinedInput,\n                            focused: classes.cssFocused,\n                            notchedOutline: classes.notchedOutline\n                          }\n                        }}\n                        InputLabelProps={{\n                          className: classes.input,\n                          shrink: true\n                        }}\n                      />\n                    </div>\n                    <br />\n                    <br />\n                    <h3>Contest Information</h3>\n                    <div>\n                      <TextField\n                        align=\"left\"\n                        id=\"outlined-name\"\n                        label=\"name your contest\"\n                        className={classes.fieldLarge}\n                        value={this.state.contestName}\n                        onChange={this.handleInputChangeFor(\"contestName\")}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        InputProps={{\n                          className: classes.input,\n                          classes: {\n                            root: classes.cssOutlinedInput,\n                            focused: classes.cssFocused,\n                            notchedOutline: classes.notchedOutline\n                          }\n                        }}\n                        InputLabelProps={{\n                          className: classes.input,\n                          shrink: true\n                        }}\n                      />\n                    </div>\n                    <div>\n                      <FormControl\n                        component=\"fieldset\"\n                        className={classes.radio}\n                      >\n                        <FormLabel\n                          component=\"legend\"\n                          style={{ color: \"black\" }}\n                        >\n                          Should your game include an option for a compost bin?\n                        </FormLabel>\n                        <RadioGroup\n                          aria-label=\"compost bin\"\n                          name=\"compostBin\"\n                          onChange={this.handleInputChangeFor(\"compostBin\")}\n                        >\n                          <FormControlLabel\n                            value=\"true\"\n                            control={<Radio />}\n                            label=\"Yes\"\n                          />\n                          <FormControlLabel\n                            value=\"false\"\n                            control={<Radio />}\n                            label=\"No\"\n                          />\n                        </RadioGroup>\n                      </FormControl>\n                    </div>\n                    <div>\n                      <TextField\n                        type=\"date\"\n                        align=\"left\"\n                        id=\"outlined-name\"\n                        label=\"contest start date\"\n                        className={classes.fieldMedium}\n                        value={this.state.contestStartDate}\n                        onChange={this.handleInputChangeFor(\"contestStartDate\")}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        InputProps={{\n                          className: classes.input,\n                          classes: {\n                            root: classes.cssOutlinedInput,\n                            focused: classes.cssFocused,\n                            notchedOutline: classes.notchedOutline\n                          }\n                        }}\n                        InputLabelProps={{\n                          className: classes.input,\n                          shrink: true\n                        }}\n                      />\n                      <TextField\n                        align=\"left\"\n                        id=\"outlined-name\"\n                        select\n                        label=\"contest start time\"\n                        className={classes.fieldMedium}\n                        value={this.state.contestStartTime}\n                        onChange={this.handleInputChangeFor(\"contestStartTime\")}\n                        SelectProps={{\n                          MenuProps: {\n                            className: classes.status\n                          }\n                        }}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        InputProps={{\n                          className: classes.input,\n                          classes: {\n                            root: classes.cssOutlinedInput,\n                            focused: classes.cssFocused,\n                            notchedOutline: classes.notchedOutline\n                          }\n                        }}\n                        InputLabelProps={{\n                          className: classes.input,\n                          shrink: true\n                        }}\n                      >\n                        {hourSelection.map(hour => (\n                          <MenuItem\n                            key={hour.sqlValue}\n                            value={hour.sqlValue}\n                            className={classes.timeOptions}\n                          >\n                            {hour.displayValue}\n                          </MenuItem>\n                        ))}\n                      </TextField>\n                    </div>\n                    <div>\n                      <TextField\n                        type=\"date\"\n                        align=\"left\"\n                        id=\"outlined-name\"\n                        label=\"contest end date\"\n                        className={classes.fieldMedium}\n                        value={this.state.contestEndDate}\n                        onChange={this.handleInputChangeFor(\"contestEndDate\")}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        InputProps={{\n                          className: classes.input,\n                          classes: {\n                            root: classes.cssOutlinedInput,\n                            focused: classes.cssFocused,\n                            notchedOutline: classes.notchedOutline\n                          }\n                        }}\n                        InputLabelProps={{\n                          className: classes.input,\n                          shrink: true\n                        }}\n                      />\n                      <TextField\n                        align=\"left\"\n                        id=\"outlined-name\"\n                        select\n                        label=\"contest end time\"\n                        className={classes.fieldMedium}\n                        value={this.state.contestEndTime}\n                        onChange={this.handleInputChangeFor(\"contestEndTime\")}\n                        SelectProps={{\n                          MenuProps: {\n                            className: classes.status\n                          }\n                        }}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        InputProps={{\n                          className: classes.input,\n                          classes: {\n                            root: classes.cssOutlinedInput,\n                            focused: classes.cssFocused,\n                            notchedOutline: classes.notchedOutline\n                          }\n                        }}\n                        InputLabelProps={{\n                          className: classes.input,\n                          shrink: true\n                        }}\n                      >\n                        {hourSelection.map(hour => (\n                          <MenuItem\n                            key={hour.sqlValue}\n                            value={hour.sqlValue}\n                            className={classes.timeOptions}\n                          >\n                            {hour.displayValue}\n                          </MenuItem>\n                        ))}\n                      </TextField>\n                    </div>\n                    <br />\n                    <div>\n                      <div>\n                        <Button\n                          variant=\"contained\"\n                          color=\"primary\"\n                          type=\"submit\"\n                          name=\"submit\"\n                          value=\"Register\"\n                        >\n                          Register\n                        </Button>\n                      </div>\n                      <br />\n                      <div>\n                        <Button\n                          variant=\"contained\"\n                          color=\"secondary\"\n                          value=\"Login\"\n                          onClick={this.toLogin}\n                        >\n                          Back to Login\n                        </Button>\n                      </div>\n                    </div>\n                  </form>\n                </CardContent>\n              </Card>\n            </Grid>\n          </Grid>\n        </div>\n      </Box>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default withRouter(connect(mapStateToProps)(withStyles(styles)(RegisterPage)));","import React from 'react';\nimport {Route} from 'react-router-dom'\nimport {connect} from 'react-redux';\nimport LoginPage from '../LoginPage/LoginPage';\nimport RegisterPage from '../RegisterPage/RegisterPage';\n\n// A Custom Wrapper Component -- This will keep our code DRY.\n// Responsible for watching redux state, and returning an appropriate component\n// API for this component is the same as a regular route\n\n// THIS IS NOT SECURITY! That must be done on the server\n// A malicious user could change the code and see any view\n// so your server-side route must implement real security\n// by checking req.isAuthenticated for authentication\n// and by checking req.user for authorization\n\nconst ProtectedRoute = (props) => {\n  // Using destructuring, this takes ComponentToProtect from component\n  // prop and grabs all other props to pass them along to Route\n  const {\n    // Alias prop 'component' as 'ComponentToProtect'\n    component: ComponentToProtect,\n    user,\n    loginMode,\n    ...otherProps\n  } = props;\n\n  let ComponentToShow;\n\n  // if(user.id.wastewise_admin) {\n  //   ComponentToShow = ComponentToProtect;\n  // } else if (loginMode === 'login') {\n  //   ComponentToShow = SettingsAdmin\n  // } else {\n  //   ComponentToShow = SettingsOrganization\n  // }\n\n\n\n  if(user.id) {\n    // if the user is logged in (only logged in users have ids)\n    // show the component that is protected\n    ComponentToShow = ComponentToProtect;\n  } else if (loginMode === 'login') {\n    // if they are not logged in, check the loginMode on Redux State\n    // if the mode is 'login', show the LoginPage\n    ComponentToShow = LoginPage;\n  } else {\n    // the the user is not logged in and the mode is not 'login'\n    // show the RegisterPage\n    ComponentToShow = RegisterPage;\n  }\n\n  // We return a Route component that gets added to our list of routes\n  return (\n      <Route\n        // all props like 'exact' and 'path' that were passed in\n        // are now passed along to the 'Route' Component\n        {...otherProps}\n        component={ComponentToShow}\n      />\n  )\n}\n\n// Instead of taking everything from state, we just want the user and loginMode\n// to determine which page we should show the user\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user, loginMode }) => ({ user, loginMode });\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    loginMode: state.loginMode,\n  }\n}\n\nexport default connect(mapStateToProps)(ProtectedRoute)\n\n\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport Button from \"@material-ui/core/Button\";\nimport Typography from '@material-ui/core/Typography';\n\n\nconst styles = {\n  compostDiv: {\n    // backgroundColor: \"grey\",\n    borderRadius: \"25px\",\n    width: 300\n  },\n  compostDivHolderDiv: {\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  choiceText: {\n    textAlign: 'center',\n    width: 'auto'\n  },\n  compostButtons: {\n    display: 'flex',\n    margin: 'auto',\n    width: 'auto',\n    padding: 10\n  },\n  button: {\n    padding: 10,\n    width: 300,\n    margin: 10,\n    borderRadius: 25,\n    border: \"2px solid black\"\n  }\n}\n\nclass CompostBinChoice extends Component {\n  noCompostClick = () => {\n    this.props.dispatch({\n      type: 'NO_COMPOST_BIN'\n    })\n    this.props.history.push('/game')\n  }\n  render() {\n    return (\n      <div className={this.props.classes.compostDivHolderDiv}>\n        <div className={this.props.classes.compostDiv}>\n          {/* <Typography className={this.props.classes.choiceText} variant='h6'>\n            Do you have a compost bin? Please select yes or no:\n            </Typography> */}\n            <div className={this.props.classes.compostButtons}>\n          <Button\n          className={this.props.classes.button}\n            color='primary'\n            variant='contained'\n            onClick={() => this.props.history.push(\"/game\")}>\n            I have Trash, Recycling, and Composting\n            </Button>\n          <Button\n              className={this.props.classes.button}\n            color='primary'\n            variant='contained'\n            onClick={this.noCompostClick}>\n            I only have Trash and Recycling\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect()(withRouter(withStyles(styles)(CompostBinChoice)));","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nfunction AlertDialog() {\n  const [open, setOpen] = React.useState(false);\n\n  function handleClickOpen() {\n    setOpen(true);\n  }\n\n  function handleClose() {\n    setOpen(false);\n  }\n\n  function noCompostClick() {\n    this.props.dispatch({\n        type: 'NO_COMPOST_BIN'\n    })\n    this.props.history.push('/game')\n  }\n\n  return (\n    <div>\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\n        Open alert dialog\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby='alert-dialog-title'\n        aria-describedby='alert-dialog-description'>\n        <DialogTitle id='alert-dialog-title'>\n          {\"Do you have a compost bin?\"}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id='alert-dialog-description'>\n            This will determine which bins you play with in game.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={() => this.props.history.push(\"/game\")}\n            color='primary'>\n            Yes\n          </Button>\n          <Button onClick={noCompostClick} color='primary' autoFocus>\n            No\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default connect()(withRouter(AlertDialog));\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport CompostBinChoice from \"../CompostBinChoice/CompostBinChoice\";\nimport Button from \"@material-ui/core/Button\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { Card, CardContent, Grid, Select } from \"@material-ui/core\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\nimport Help from \"@material-ui/icons/Help\";\nimport PlayArrow from \"@material-ui/icons/PlayArrow\";\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Paper from '@material-ui/core/Paper';\nimport CompostBinModal from \"../CompostBinModal/CompostBinModal\"\nimport Moment from 'react-moment';\n\nconst MySwal = withReactContent(Swal);\n\nconst styles = {\n  HowToPlayButton: {\n    backgroundColor: \"green\",\n    color: \"white\",\n    border: \"2px solid black\",\n    fontSize: \"calc(15px + 2vmin)\",\n    padding: \"5px\",\n    borderRadius: 50,\n    \"&:hover\": {\n      // change to both KEY and the\n      // textDecoration: \"underline\",\n      backgroundColor: \"#009E0A\",\n      color: \"black\"\n    }\n  },\n  PlayButton: {\n    backgroundColor: \"green\",\n    color: \"white\",\n    border: \"2px solid black\",\n    fontSize: \"calc(35px + 2vmin)\",\n    padding: \"10px auto 10px auto\",\n    // margin: 20,\n    width: \"50%\",\n    borderRadius: \"200px\",\n    \"&:hover\": {\n      // change to both KEY and the\n      // textDecoration: \"underline\",\n      backgroundColor: \"#009E0A\",\n      color: \"black\"\n    }\n  },\n  contestPlayButton: {\n    backgroundColor: \"green\",\n    color: \"white\",\n    border: \"2px solid black\",\n    fontSize: \"20px\",\n    // padding: \"10px 100px 10px 50px\",\n    margin: \"50px\",\n    width: \"75%\",\n    borderRadius: \"20px\",\n    \"&:hover\": {\n      // change to both KEY and the\n      // textDecoration: \"underline\",\n      backgroundColor: \"#009E0A\",\n      color: \"black\",\n      display: 'flex',\n      justifyContent: 'center'\n    },\n  },\n\n    contestPlayButtonDialog: {\n      backgroundColor: \"green\",\n      color: \"white\",\n      border: \"2px solid black\",\n      fontSize: \"20px\",\n      // padding: \"10px 100px 10px 50px\",\n      margin: \"50px\",\n      width: \"75%\",\n      borderRadius: \"20px\",\n      \"&:hover\": {\n        // change to both KEY and the\n        // textDecoration: \"underline\",\n        backgroundColor: \"#009E0A\",\n        color: \"black\"\n      },\n  },\n\n  contestForm: {\n    backgroundColor: \"lightgrey\",\n    borderRadius: \"25px\",\n    margin: \"5px\",\n    maxWidth: \"450px\",\n    display: \"inline-block\",\n    margin: 'auto'\n  },\n  formInputs: {\n    padding: 5,\n    margin: 5\n  },\n  teamSelect: {\n    width: '200px',\n    margin: '10px 0px 0px 0px'\n  },\n  svgIcon: {\n    fontSize: \"calc(15px + 2vmin)\",\n    paddingRight: \"-40px\"\n  },\n  mainDiv: {\n    backgroundColor: 'lightGrey'\n  },\n  nameHeader: {\n    fontFamily: 'chunk'\n  },\n  playButtonDiv: {\n    display: 'flex',\n    justifyContent: 'center',\n    margin: '5px auto 15px auto'\n  },\n  contestDiv: {\n    justifyContent: 'center',\n    display: 'grid'\n  },\n  contestFormHeader: {\n    textAlign: 'center'\n  },\n  dialogHeader: {\n    textAlign: 'center'\n  },\n};\n\nclass GameLaunch extends Component {\n  state = {\n    timeToPlay: false,\n    email: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    contestPlayReady: false,\n    teamName: \"\",\n    modalOpen: false,\n  };\n\n  componentDidMount() {\n    //this will get the id of the contest game from url params\n    let contestIdNumber = this.props.history.location.search.split(\"=\").pop();\n    //if this is a contest game, send dispatch to find whether game has compost or not\n    this.props.history.location.search &&\n      this.props.dispatch({\n        type: \"GET_CONTEST_COMPOST_BOOLEAN\",\n        payload: contestIdNumber\n      });\n    this.props.dispatch({\n      type: 'GET_COMPANY_ID',\n      payload: contestIdNumber\n    })\n\n    this.handleTeamNames();\n    this.getContestInfo(contestIdNumber);\n  }\n\n  componentWillUnmount() {\n    this.props.dispatch({\n      type: 'FETCH_TEAM_ID_NUMBER',\n      payload: {\n        teamName: this.state.teamName,\n        organizationId: this.props.compostBoolean[0].organization_id\n      }\n    })\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.currentContest !== prevProps.currentContest) {\n    }\n  }\n\n  getContestInfo(contestId) {\n    this.props.dispatch({\n      type: \"FETCH_CURRENT_CONTEST_INFO\",\n      payload: contestId\n    })\n  }\n\n  //gets team names from database to populate dropdown\n  handleTeamNames = () => {\n    let contestIdNumber = this.props.history.location.search.split(\"=\").pop();\n    this.props.dispatch({\n      type: \"GET_TEAM_NAMES\",\n      payload: contestIdNumber\n    });\n  };\n\n  // route the user back to the how to play page\n  howToPlay = () => {\n    if (this.props.history.location.search) {\n      this.props.history.push(`/howtoplay${this.props.history.location.search}`)\n    } else {\n      this.props.history.push(\"/howtoplay\");\n    }\n  };\n\n// route the user back to the gamelaunch page\ntoGame = () => {\n  this.setState({\n    timeToPlay: true\n  });\n};\n\nhandleSubmit = event => {\n  event.preventDefault();\n  this.props.dispatch({\n    type: \"SET_SCORE_PERSONAL_INFO\",\n    payload: this.state\n  })\n  //hits reducer to remove compost bin from game if contest has no compost\n  if (!this.props.compostBoolean[0].compost) {\n    this.props.dispatch({\n      type: \"NO_COMPOST_BIN\"\n    });\n  }\n  this.props.history.push(`/game${this.props.history.location.search}`);\n}\n\nhandleChange = name => event => {\n  this.setState({\n    [name]: event.target.value\n  });\n};\n\nhandleOpen = () => {\n  this.setState({\n    modalOpen: true\n  })\n}\n\nhandleClose = () => {\n  this.setState({\n    modalOpen: false\n  })\n}\n\nhandleLeaderboardClick = () => {\n  let contestIdParam = this.props.history.location.search\n  this.props.history.push(`/leaderboard${contestIdParam}`)\n}\n\n  handlePresoClick = () => {\n    this.setState({\n      email: \"andy@mikescompany.com\",\n      firstName: \"Andy\",\n      lastName: \"DuBois\",\n      teamName: \"Programming\",\n    })\n  }\n\nrender() {\n\n  let teamNameArray = this.props.teamNames.map(name => {\n    return <MenuItem value={name.team_name}>{name.team_name}</MenuItem>;\n  });\n\n  let moment = require('moment');\n  let contestStartDate = this.props.currentContest.start_date\n  let contestStartTime = this.props.currentContest.start_time\n  let contestEndDate = this.props.currentContest.end_date\n  let contestEndTime = this.props.currentContest.end_time\n\n  let convertedStartDate = moment(contestStartDate).valueOf();\n  let convertedEndDate = moment(contestEndDate).valueOf();\n  let convertedStartTime = contestStartTime * 3600000\n  let convertedEndTime = contestEndTime * 3600000\n\n  let start = convertedStartDate + convertedStartTime\n  let end = convertedEndDate + convertedEndTime\n  let current = Date.now();\n\n  let activeContest = false;\n\n  if (current > start && current < end) {\n    activeContest = true;\n  }\n\n  return (\n    <div className={this.props.classes.mainDiv}>\n      <Typography classes={this.props.classes.nameHeader} component=\"div\">\n        <Box fontFamily='chunk' fontSize=\"h1.fontSize\" textAlign=\"center\">\n          KNOW WHAT TO THROW\n                  </Box>\n      </Typography>\n      <div>\n        <Grid item xs={12}>\n          <div className={this.props.classes.playButtonDiv}>\n            <Button\n              className={this.props.classes.HowToPlayButton}\n              onClick={this.howToPlay}>\n              How To Play\n                </Button>\n          </div>\n        </Grid>\n        <Grid\n          container\n          alignItems={\"center\"}\n          alignContent={\"center\"}\n          justify=\"center\"\n        >\n          <Grid item xs={12}>\n            <div>\n              <Typography component=\"div\" gutterBottom>\n                <Box fontSize=\"h5.fontSize\" textAlign=\"center\">\n                  Welcome to KNOW WHAT TO THROW, the game that tests your recycling skills\n                  </Box>\n              </Typography>\n            </div>\n          </Grid>\n          <div>\n            <Typography component=\"div\" gutterBottom>\n              <Box fontSize={16} textAlign=\"center\">\n                Click PLAY to get started, or HOW TO PLAY to view the tutorial\n                </Box>\n            </Typography>\n            <Typography component=\"div\" gutterBottom>\n              <Box fontSize={16} textAlign=\"center\">\n                If you want to create a contest for your organization, click REGISTER\n                </Box>\n            </Typography>\n\n          </div>\n        </Grid>\n      </div>\n      <div>\n        <Grid\n          container\n          justify=\"center\"\n          alignItems=\"center\"\n          alignContent=\"center\">\n          <Grid item xs={12}>\n            <div className={this.props.classes.playButtonDiv}>\n              <Button\n                className={this.props.classes.PlayButton}\n                onClick={this.toGame}>\n                PLAY!\n                </Button>\n            </div>\n            {/* conditionally render CompostBinChoice when play is clicked */}\n            {this.state.timeToPlay && <CompostBinChoice />}\n          </Grid>\n        </Grid>\n        <Grid\n          container\n          spacing={24}>\n          <Grid item xs={6}>\n            {activeContest && <Button\n              onClick={this.handleOpen}\n              className={this.props.classes.contestPlayButton}\n            >\n              <PlayArrow className={this.props.classes.svgIcon} />\n              CONTEST PLAY!{\" \"}\n            </Button>}\n          </Grid>\n          <Grid item item xs={6}>\n            {activeContest && <Button\n              onClick={this.handleLeaderboardClick}\n              className={this.props.classes.contestPlayButton}\n            >\n              <PlayArrow className={this.props.classes.svgIcon} />\n              LEADERBOARD{\" \"}\n            </Button>}\n          </Grid>\n        </Grid>\n        {!activeContest && this.props.history.location.search &&\n          <Card style={{ margin: 5, width: 'auto' }}>\n            <CardContent>\n              <div style={{ fontSize: 18, textAlign: 'center', }}>\n                The contest you are trying to access has either expired, or has not yet started.\n                    <br /><br />\n                Please feel free to play the game for fun!\n                  </div>\n            </CardContent>\n          </Card>\n        }\n        <div className={this.props.classes.contestDiv}>\n          <Grid item xs={12}></Grid>\n\n          {this.props.history.location.search && (\n            <Grid item xs={12}>\n              {/* <form\n                  className={this.props.classes.contestForm}\n                  onSubmit={this.handleSubmit}> */}\n\n              {/* <div className={this.props.classes.contestFormHeader}> */}\n              <div>\n                <Dialog open={this.state.modalOpen} onClose={this.handleClose}>\n                  <DialogTitle className={this.props.classes.dialogHeader}>\n                    Are you sure you are ready? You only get one\n                    chance to play to record a score! You can practice\n                    all you want by clicking cancel and then clicking Play.\n                      </DialogTitle>\n\n                  <form\n                    className={this.props.classes.contestForm}\n                    onSubmit={this.handleSubmit}>\n                    <FormControl className={this.props.classes.formInputs}>\n                      <TextField\n                        required\n                        label='Email Address'\n                        type='email'\n                        value={this.state.email}\n                        onChange={this.handleChange(\"email\")}\n                      />\n                      <TextField\n                        required\n                        label='First Name'\n                        value={this.state.firstName}\n                        onChange={this.handleChange(\"firstName\")}\n                      />\n                      <TextField\n                        required\n                        label='Last Name'\n                        value={this.state.lastName}\n                        onChange={this.handleChange(\"lastName\")}\n                      />\n                    </FormControl>\n                    {activeContest && this.props.teamNames[0] ? (\n                      <FormControl\n                        required\n                        className={this.props.classes.teamSelect}>\n                        <InputLabel>Team Select</InputLabel>\n                        <Select\n                          label='Team Name'\n                          value={this.state.teamName}\n                          onChange={this.handleChange(\"teamName\")}>\n                          <MenuItem default value='None'>\n                            <em>Select Team</em>\n                          </MenuItem>\n                          {/* CONDITIAIONLLY RENDER ARRAY IF THERE ARE TEAM NAMES */}\n                          {this.props.teamNames && teamNameArray}\n                        </Select>\n                      </FormControl>\n                    ) : (\n                        <></>\n                      )}\n                    {activeContest && <div><Typography component=\"div\">\n                      <Box onClick={() => this.handlePresoClick()} fontSize=\"body1.fontSize\" textAlign=\"center\">\n                        Click Contest Play when you are ready - you only get one chance to play for a score!\n                        </Box>\n                      </Typography>\n                    </div>}\n                    {activeContest && <Button\n                      type='submit'\n                      className={this.props.classes.contestPlayButtonDialog}\n                    // onClick={() => this.props.history.push(`/game${this.props.history.location.search}`)}\n                    >\n                      <PlayArrow className={this.props.classes.svgIcon} />\n                      CONTEST PLAY!{\" \"}\n                    </Button>}\n                  </form>\n                  <DialogActions>\n                    <Button onClick={this.handleClose} color=\"primary\">\n                      Cancel\n                        </Button>\n                  </DialogActions>\n                </Dialog>\n              </div>\n              {/* {activeContest && <FormControl className={this.props.classes.formInputs}>\n                    <TextField\n                      required\n                      label='Email Address'\n                      type='email'\n                      value={this.state.email}\n                      onChange={this.handleChange(\"email\")}\n                    />\n                    <TextField\n                      required\n                      label='First Name'\n                      value={this.state.firstName}\n                      onChange={this.handleChange(\"firstName\")}\n                    />\n                    <TextField\n                      required\n                      label='Last Name'\n                      value={this.state.lastName}\n                      onChange={this.handleChange(\"lastName\")}\n                    />\n                  </FormControl>} */}\n              {/* CONDITIONALLY RENDER TEAM NAME SELECTOR\n                  IF THERE ARE TEAM NAMES IN REDUCER */}\n              {/* {activeContest && this.props.teamNames[0] ? (\n                    <FormControl\n                      required\n                      className={this.props.classes.teamSelect}>\n                      <InputLabel>Team Select</InputLabel>\n                      <Select\n                        label='Team Name'\n                        value={this.state.teamName}\n                        onChange={this.handleChange(\"teamName\")}>\n                        <MenuItem default value='None'>\n                          <em>Select Team</em>\n                        </MenuItem>\n                        {/* CONDITIAIONLLY RENDER ARRAY IF THERE ARE TEAM NAMES */}\n              {/* {this.props.teamNames && teamNameArray}\n                      </Select>\n                    </FormControl>\n                  ) : (\n                      <></>\n                    )} */}\n              {/* {activeContest && <Button\n                    type='submit'\n                    className={this.props.classes.contestPlayButton}\n                  // onClick={() => this.props.history.push(`/game${this.props.history.location.search}`)}\n                  >\n                    <PlayArrow className={this.props.classes.svgIcon} />\n                    CONTEST PLAY!{\" \"}\n                  </Button>}\n                </form> */}\n            </Grid>\n          )}\n        </div>\n      </div>\n      <br></br>\n    </div>\n  );\n}\n}\n\n//mapping the state to props\nconst mapStateToProps = reduxStore => {\n  return {\n    reduxStore,\n    compostBoolean: reduxStore.contestCompostBooleanReducer,\n    teamNames: reduxStore.organizationTeamNameReducer,\n    currentContest: reduxStore.currentContestInfo,\n    contestUser: reduxStore.contestUserInfoReducer\n  };\n};\n\n// exports the component\nexport default connect(mapStateToProps)(withStyles(styles)(GameLaunch));\n","import React from 'react';\nimport { Route } from 'react-router-dom'\nimport { connect } from 'react-redux';\nimport LoginPage from '../LoginPage/LoginPage';\nimport RegisterPage from '../RegisterPage/RegisterPage';\nimport GameLaunch from '../GameLaunch/GameLaunch';\n\n// A Custom Wrapper Component -- This will keep our code DRY.\n// Responsible for watching redux state, and returning an appropriate component\n// API for this component is the same as a regular route\n\n// THIS IS NOT SECURITY! That must be done on the server\n// A malicious user could change the code and see any view\n// so your server-side route must implement real security\n// by checking req.isAuthenticated for authentication\n// and by checking req.user for authorization\n\nconst AdminRoute = (props) => {\n    // Using destructuring, this takes ComponentToProtect from component\n    // prop and grabs all other props to pass them along to Route\n    const {\n        // Alias prop 'component' as 'ComponentToProtect'\n        component: ComponentToProtect,\n        user,\n        loginMode,\n        ...otherProps\n    } = props;\n\n    let ComponentToShow;\n\n    if (user.id && user.wastewise_admin === true) {\n        // if the user is logged in (only logged in users have ids)\n        // show the component that is protected\n        ComponentToShow = ComponentToProtect;\n    } else if (loginMode === 'login') {\n        // if they are not logged in, check the loginMode on Redux State\n        // if the mode is 'login', show the LoginPage\n        ComponentToShow = GameLaunch;\n    } else {\n        // the the user is not logged in and the mode is not 'login'\n        // show the RegisterPage\n        ComponentToShow = RegisterPage;\n    }\n\n    // We return a Route component that gets added to our list of routes\n    return (\n        <Route\n            // all props like 'exact' and 'path' that were passed in\n            // are now passed along to the 'Route' Component\n            {...otherProps}\n            component={ComponentToShow}\n        />\n    )\n}\n\n// Instead of taking everything from state, we just want the user and loginMode\n// to determine which page we should show the user\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user, loginMode }) => ({ user, loginMode });\nconst mapStateToProps = (state) => {\n    return {\n        user: state.user,\n        loginMode: state.loginMode,\n    }\n}\n\nexport default connect(mapStateToProps)(AdminRoute)\n\n\n","export default {\n    BOX: 'box',\n}\n","import React from \"react\";\n\nconst SvgGarbageFilled = props => (\n  <svg height={160} viewBox=\"0 0 64 64\" width={160} {...props}>\n    <path\n      d=\"M39 16H7L9 3h28zM39 22l-.03 1L38 61H8l-.97-38L7 22z\"\n      fill=\"#57565c\"\n    />\n    <g fill=\"#e0e0e2\">\n      <path d=\"M30 26h4v31h-4zM21 26h4v31h-4zM12 26h4v31h-4z\" />\n    </g>\n    <path\n      d=\"M13 27h3v-1h-4v31h1zM22 27h3v-1h-4v31h1zM31 27h3v-1h-4v31h1z\"\n      fill=\"#c6c5ca\"\n    />\n    <path\n      d=\"M4 16h38v6H4zM32 3l-.11 1-.78 7-.11 1H15l-.11-1-.78-7L14 3z\"\n      fill=\"#e0e0e2\"\n    />\n    <path\n      d=\"M51 25l-2.31 7.7a16.061 16.061 0 00-9.38 0L37 25l1.88 1.5v.01L42 29l2-4 3 2z\"\n      fill=\"#2d2d30\"\n    />\n    <path\n      d=\"M34 35.51A16 16 0 0160 48c0 8.84-7.16 13-16 13a23.845 23.845 0 01-5.98-.72v-.01C32.14 58.74 28 54.72 28 48a15.982 15.982 0 016-12.49z\"\n      fill=\"#3e3d42\"\n    />\n    <path\n      d=\"M54.821 36.226A15.932 15.932 0 0159 47c0 8.84-7.16 13-16 13a23.845 23.845 0 01-5.98-.72v-.01a14.786 14.786 0 01-6.215-3.189 14.057 14.057 0 007.215 4.189v.01A23.845 23.845 0 0044 61c8.84 0 16-4.16 16-13a15.942 15.942 0 00-5.179-11.774z\"\n      fill=\"#2d2d30\"\n    />\n    <path d=\"M45 30h1v3h-1z\" fill=\"#3e3d42\" />\n    <ellipse\n      cx={36.5}\n      cy={40}\n      fill=\"#57565c\"\n      rx={4}\n      ry={2.5}\n      transform=\"rotate(-45 36.495 40.01)\"\n    />\n    <rect fill=\"#fff\" height={2} rx={1} width={8} x={6} y={17} />\n    <path d=\"M39 22l-.03 1H7.03L7 22z\" fill=\"#2d2d30\" />\n    <path d=\"M32 3l-.11 1H14.11L14 3z\" fill=\"#acabb1\" />\n  </svg>\n);\n\nexport default SvgGarbageFilled;\n","import React from \"react\";\nimport { DropTarget } from \"react-dnd\";\nimport ItemTypes from \"../ItemTypes/ItemTypes\";\nimport GarbageSvg from \"../../icons/GarbageFilled\";\n\n\nconst style = {\n  height: \"auto\",\n  width: \"12rem\",\n  marginRight: \"1.5rem\",\n  marginBottom: \"1.5rem\",\n  color: \"white\",\n  padding: \"1rem\",\n  textAlign: \"center\",\n  fontSize: \"1rem\",\n  lineHeight: \"normal\",\n  float: \"left\",\n  borderRadius: \"20px\",\n  // fontFamily: \"truckin\"\n};\n\n//sets attributes so garbage div is draggable\nconst GarbageBin = ({ canDrop, isOver, connectDropTarget }) => {\n  const isActive = canDrop && isOver;\n  let backgroundColor = \"rgb(189,183,107,.6)\";\n  if (isActive) {\n    //changes background color to darkgreen when being dragged\n    backgroundColor = \"darkgreen\";\n  } else if (canDrop) {\n    backgroundColor = \"darkkhaki\";\n  }\n  return (\n    <div ref={connectDropTarget} style={{ ...style, backgroundColor }}>\n        <h2>Trash</h2>\n        <GarbageSvg />\n    </div>\n  );\n};\nexport default DropTarget(\n  ItemTypes.BOX,\n  {\n    drop: () => ({ name: 'garbage' })\n  },\n  (connect, monitor) => ({\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n    canDrop: monitor.canDrop()\n  })\n)(GarbageBin);\n","import React from \"react\";\n\nconst SvgBin = props => (\n  <svg height={160} viewBox=\"0 0 42 60\" width={160} {...props}>\n    <g fill=\"none\">\n      <g transform=\"translate(1 1)\">\n        <path\n          d=\"M38 16c-2.89 40.34-2.54 35.4-2.87 40.14a2 2 0 01-2 1.86H6.86a2 2 0 01-2-1.86C4.56 51.67 5 58 2 16z\"\n          fill=\"#549414\"\n        />\n        <path\n          d=\"M35 16c-2.89 40.34-2.54 35.4-2.87 40.14a2 2 0 01-2 1.86H6.86a2 2 0 01-2-1.86C4.56 51.67 5 58 2 16z\"\n          fill=\"#60a917\"\n        />\n        <circle cx={20} cy={32} fill=\"#ffeb3a\" r={12} />\n        <path\n          d=\"M24.57 27.09a1.73 1.73 0 01-.87-.52A4.57 4.57 0 0020 25c-5.65 0-6.79 9-7 12.28a.67.67 0 00.92.67C17.4 36.48 27 35.46 27 31c0-2.5-1.39-3.61-2.43-3.91z\"\n          fill=\"#008a00\"\n        />\n        <path d=\"M38 16H2a2 2 0 110-4h36a2 2 0 110 4z\" fill=\"#007900\" />\n        <path d=\"M35 16H2a2 2 0 110-4h33a2 2 0 110 4z\" fill=\"#008a00\" />\n        <path d=\"M38 12H2C2 7 3 0 9 0h22c6 0 7 7 7 12z\" fill=\"#549414\" />\n        <path d=\"M35 12H2C2 7 3 0 9 0h19c6 0 7 7 7 12z\" fill=\"#60a917\" />\n        <path d=\"M10 0h20v6a2 2 0 01-2 2H12a2 2 0 01-2-2z\" fill=\"#008a00\" />\n      </g>\n      <g fill=\"#000\">\n        <path d=\"M23.75 22.36a11 11 0 017.59 14.35 1.004 1.004 0 101.89.68 13 13 0 00-9-17 1 1 0 10-.5 1.93zM8.77 37.39a1.004 1.004 0 001.89-.68 11 11 0 017.59-14.35 1 1 0 10-.5-1.93 13 13 0 00-8.98 16.96zM28.24 41.27a11 11 0 01-13.65.65 1.002 1.002 0 00-1.18 1.62 12.93 12.93 0 0016.14-.77 1 1 0 10-1.31-1.5z\" />\n        <path d=\"M13 38.21A1.68 1.68 0 0014.67 40c.64 0 .06-.11 4.16-1.2C23.36 37.58 29 36.08 29 32a4.9 4.9 0 00-2.18-4.43l.88-.85a1.004 1.004 0 00-1.4-1.44l-1.24 1.21A5.7 5.7 0 0021 25c-6.63 0-7.8 10.11-8 13.21zm3.45-.83c4.22-5.75 7.63-7.86 8.66-8.41.07 0 .11.06.18.08.29.08 1.71.61 1.71 2.95 0 3-7.07 4.37-10.55 5.38zM21 27a4 4 0 012.36.68 31.54 31.54 0 00-8 7.86C15.88 32.08 17.31 27 21 27z\" />\n        <path d=\"M40 12.18C39.76 2.16 35.55 0 32 0H10C6.45 0 2.24 2.16 2 12.18a3 3 0 000 5.65l2.81 39.38a3 3 0 003 2.79h26.33a3 3 0 003-2.79l2.81-39.38a3 3 0 00.05-5.65zM30 2v5a1 1 0 01-1 1H13a1 1 0 01-1-1V2zM10 2v5a3 3 0 003 3h16a3 3 0 003-3V2c2.63 0 5.75 1.77 6 10H4c.25-8.23 3.37-10 6-10zm24.14 56H7.86a1 1 0 01-1-.93L6.79 56h28.42l-.07 1.07a1 1 0 01-1 .93zm1.21-4H6.65L4.07 18h33.86zM39 16H3a1 1 0 010-2h36a1 1 0 010 2z\" />\n      </g>\n    </g>\n  </svg>\n);\n\nexport default SvgBin;\n","import React from \"react\";\nimport { DropTarget } from \"react-dnd\";\nimport ItemTypes from \"../ItemTypes/ItemTypes\";\nimport CompostSvg from \"../../icons/Bin\"\n\nconst style = {\n  height: \"auto\",\n  width: \"12rem\",\n  marginRight: \"1.5rem\",\n  marginBottom: \"1.5rem\",\n  color: \"white\",\n  padding: \"1rem\",\n  textAlign: \"center\",\n  fontSize: \"1rem\",\n  lineHeight: \"normal\",\n  float: \"left\",\n  borderRadius: \"20px\",\n  // fontFamily: \"truckin\"\n};\n//sets attributes so compost div is draggable\nconst CompostBin = ({ canDrop, isOver, connectDropTarget }) => {\n  const isActive = canDrop && isOver;\n  let backgroundColor = \"rgb(189,183,107,.6)\";\n  if (isActive) {\n    //changes background color to darkgreen when being dragged\n    backgroundColor = \"darkgreen\";\n  } else if (canDrop) {\n    backgroundColor = \"darkkhaki\";\n  }\n  return (\n    <div ref={connectDropTarget} style={{ ...style, backgroundColor }}>\n      <h2>Compost</h2>\n        <CompostSvg />\n    </div>\n  );\n};\nexport default DropTarget(\n  ItemTypes.BOX,\n  {\n    drop: () => ({ name: \"compost\" })\n  },\n  (connect, monitor) => ({\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n    canDrop: monitor.canDrop()\n  })\n)(CompostBin);\n","import React from \"react\";\n\nconst SvgRecycleBin = props => (\n  <svg height={160} viewBox='0 0 512 512' width={160} {...props}>\n    <g data-name='Filled outline'>\n      <rect fill='#4d5e78' height={96} rx={16} width={32} x={176} y={328} />\n      <rect fill='#4d5e78' height={96} rx={16} width={32} x={400} y={328} />\n      <path d='M208 360h192v32H208z' fill='#b0b0ae' />\n      <path d='M416 120l-24 304H216l-11.82-149.74L192 120z' fill='#348fd9' />\n      <path\n        d='M272 320v104h-56l-11.82-149.74A103.162 103.162 0 01224 272a48 48 0 0148 48zM368 120l-24 304h48l24-304z'\n        fill='#3086cd'\n      />\n      <path d='M168 88h272v32H168z' fill='#348fd9' />\n      <path d='M424 88H184l8-32h224z' fill='#3086cd' />\n      <path d='M416 56h-32l8 32h32z' fill='#2d7dbf' />\n      <path\n        d='M152 258.745V160h-48v98.745A109.256 109.256 0 0072 336v152h112V336a109.256 109.256 0 00-32-77.255z'\n        fill='#7eb457'\n      />\n      <path\n        d='M72 453.977V488h112V336a109.029 109.029 0 00-3.745-27.886C147.43 389.586 102.144 432.778 72 453.977z'\n        fill='#77ad50'\n      />\n      <circle cx={128} cy={160} fill='#5f943a' r={24} />\n      <path d='M160 320h96v168h-96z' fill='#f35244' />\n      <path\n        d='M160 473.4V488h96V344c-30.132 65.968-67.063 101.227-96 129.4z'\n        fill='#ea4a3b'\n      />\n      <circle cx={208} cy={320} fill='#e0e0de' r={48} />\n      <path\n        d='M234.234 318.609A13.868 13.868 0 00222.367 312H208a8 8 0 00-5.656 13.656l10.164 10.164a13.982 13.982 0 009.875 4.086 14.275 14.275 0 002.219-.179 14.01 14.01 0 0010.25-7.539 13.865 13.865 0 00-.618-13.579z'\n        fill='#a3a3a1'\n      />\n      <path d='M414.105 144L416 120H192l1.895 24z' fill='#3086cd' />\n      <path d='M344 16h-80a16.021 16.021 0 00-16 16v16h-56a8 8 0 00-7.758 6.062L177.758 80H168a8 8 0 00-8 8v32a8 8 0 008 8h16.6l9.512 120.625 15.953-1.25L200.656 128h206.688l-22.735 288H280v16h112a7.925 7.925 0 007.729-6.466A23.916 23.916 0 00440 408v-64a24.027 24.027 0 00-24-24 23.684 23.684 0 00-7.876 1.436L423.4 128H440a8 8 0 008-8V88a8 8 0 00-8-8h-9.758l-6.484-25.938A8 8 0 00416 48h-56V32a16.021 16.021 0 00-16-16zm72 320a8.005 8.005 0 018 8v64a8 8 0 01-16 0v-64a8.005 8.005 0 018-8zM264 32h80v16h-80zm168 80H176V96h256zm-18.25-32h-219.5l4-16h211.5z' />\n      <path d='M241.062 259.984A8 8 0 00248 264h40v-16h-26.07l16.929-29.023a8.007 8.007 0 00-9-11.758l-19.8 5.343 4.172 15.454.985-.266-14.133 24.219a8.007 8.007 0 00-.021 8.015zM323.062 176.805l-12.148-20.836a8.025 8.025 0 00-6.859-3.969 7.4 7.4 0 00-6.907 3.875l-21.875 36.305 13.7 8.25 14.914-24.742 17.679 30.32a8.017 8.017 0 006.914 3.969 7.8 7.8 0 001.688-.18 7.981 7.981 0 006.266-6.992l2.64-25.36-15.906-1.656zM366.953 259.961a7.994 7.994 0 00-.07-8.039L345.008 215l-13.766 8.156L345.961 248H311a8 8 0 00-5.75 13.562l15.461 16 11.5-11.124-2.359-2.438H360a8 8 0 006.953-4.039z' />\n      <path d='M160 160h-.277a31.827 31.827 0 00-63.446 0H96v95.469A117.268 117.268 0 0064 336v152a8 8 0 008 8h184a8 8 0 008-8V328a7.694 7.694 0 00-.363-1.8A55.84 55.84 0 00208 264a55.623 55.623 0 00-33.19 11A115.765 115.765 0 00160 255.477zm-32-13.258a16 16 0 11-16 16 16.021 16.021 0 0116-16zM248 480h-80V359.114a55.82 55.82 0 0080 0zm0-160a40 40 0 11-40-40 40.047 40.047 0 0140 40zm-84.929-33.283A55.626 55.626 0 00152 320a56.4 56.4 0 00.363 6.2A7.686 7.686 0 00152 328v152H80V336a101.272 101.272 0 0129.656-71.625 7.994 7.994 0 002.344-5.656v-68.427a30.989 30.989 0 0032 0v68.427a8.008 8.008 0 002.344 5.656 99.886 99.886 0 0116.727 22.342z' />\n      <path d='M212.508 335.82a13.982 13.982 0 009.875 4.086 14.275 14.275 0 002.219-.179 14.01 14.01 0 0010.25-7.539A13.952 13.952 0 00222.367 312H208a8 8 0 00-5.656 13.656zM96 312h16v16H96zM96 344h16v56H96zM184 392h16v16h-16zM184 424h16v40h-16z' />\n    </g>\n  </svg>\n);\n\nexport default SvgRecycleBin;\n","import React from \"react\";\nimport { DropTarget } from \"react-dnd\";\nimport ItemTypes from \"../ItemTypes/ItemTypes\";\nimport RecycleSvg from \"../../icons/RecycleBin\";\n\nconst style = {\n  height: \"auto\",\n  width: \"12rem\",\n  marginRight: \"1.5rem\",\n  marginBottom: \"1.5rem\",\n  color: \"white\",\n  padding: \"1rem\",\n  textAlign: \"center\",\n  fontSize: \"1rem\",\n  lineHeight: \"normal\",\n  float: \"left\",\n  borderRadius: \"20px\",\n  // fontFamily: \"truckin\"\n};\n//sets attributes so recycle div is draggable\nconst RecycleBin = ({ canDrop, isOver, connectDropTarget }) => {\n  const isActive = canDrop && isOver;\n  let backgroundColor = \"rgb(189,183,107,.6)\";\n  if (isActive) {\n    //changes background color to darkgreen when being dragged\n    backgroundColor = \"darkgreen\";\n  } else if (canDrop) {\n    backgroundColor = \"darkkhaki\";\n  }\n  return (\n    <div ref={connectDropTarget} style={{ ...style, backgroundColor }}>\n      <h2>Recycle</h2>\n      <RecycleSvg />\n    </div>\n  );\n};\nexport default DropTarget(\n  ItemTypes.BOX,\n  {\n    drop: () => ({ name: \"recycle\" })\n  },\n  (connect, monitor) => ({\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n    canDrop: monitor.canDrop()\n  })\n)(RecycleBin);\n","import React from \"react\";\nimport ItemTypes from \"../ItemTypes/ItemTypes\";\nimport { DragSource } from \"react-dnd\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\n\nconst style = {\n  border: \"2px solid black\",\n  padding: \"0.5rem 1rem\",\n  marginRight: \"1.5rem\",\n  marginBottom: \"1.5rem\",\n  cursor: \"move\",\n  float: \"left\",\n  width: 180,\n  height: 180,\n  backgroundSize: \"contain\",\n  backgroundRepeat: \"no-repeat\",\n  backgroundPosition: \"center\",\n  backgroundColor: \"white\",\n  borderRadius: 50\n};\n\n//value that determines if score is awarded.  If true and the player is correct a point is awarded, if false no points are awarded.\nlet firstTry = true;\n\nconst DraggableItem = ({\n  name,\n  isDragging,\n  connectDragSource,\n  label,\n  backgroundImageURL\n}) => {\n  const opacity = isDragging ? 0 : 1;\n  return (\n    //disposable item draggable div that is displayed on screen\n    <div\n      ref={connectDragSource}\n      style={{\n        ...style,\n        opacity,\n        backgroundImage: `url(\"${backgroundImageURL}\")`\n      }}>\n      {label}\n    </div>\n  );\n};\n\nlet mapStateToProps = state => {\n  return {\n    items: state.gameItemsReducer,\n    currentGameValue: state.currentGameValueReducer,\n    gameItems: state.gameItemsReducer\n  };\n};\n\nlet DragNDrop = withRouter(\n  connect(mapStateToProps)(\n    DragSource(\n      ItemTypes.BOX,\n      {\n        beginDrag: props => ({ name: props.name }),\n        endDrag(props, monitor) {\n          const item = monitor.getItem();\n          const dropResult = monitor.getDropResult();\n          //check to see if game is over, if so, push to results\n          if (\n            props.currentGameValue === props.items.length - 1 &&\n            dropResult &&\n            dropResult.name === item.name\n          ) {\n            //records how long it took player to finish game\n            props.dispatch({\n              type: \"SET_GAME_END_TIME\",\n              payload: props.gameTime\n            });\n            if (\n              firstTry === true\n            ) {\n              props.dispatch({\n                type: \"FIRST_TRY_CORRECT\",\n                payload: { id: props.items[props.currentGameValue].id}\n              });\n              firstTry = true;\n            }\n            //check to see if playing contest game, if so, push to results page\n            //with contest ID in URL\n            if (props.history.location.search) {\n              props.history.push(`/results${props.history.location.search}`);\n            } else {\n              props.history.push(\"/results\");\n            }\n          } else {\n            //if correct on the first try\n            if (\n              dropResult &&\n              dropResult.name == item.name &&\n              firstTry === true\n            ) {\n              //increments score up by one on first attempt correct\n              props.dispatch({\n                type: \"FIRST_TRY_CORRECT\",\n                payload: { id: props.items[props.currentGameValue].id }\n              });\n              //increments game value so the next item in the reducer is displayed\n              props.dispatch({\n                type: \"INCREMENT_CURRENT_GAME_VALUE\"\n              });\n              firstTry = true;\n            }\n            // if incorrect first try, will increment count for piece of trash up one, and will make you repeat until correct\n            else if (\n              dropResult &&\n              dropResult.name !== item.name &&\n              firstTry === true\n            ) {\n              firstTry = false;\n              props.dispatch({\n                type: \"FIRST_TRY_INCORRECT\",\n                payload: { id: props.items[props.currentGameValue].id }\n              });\n              //puts item into the wrong answer reducer to be displayed on results screen after game is over\n              props.dispatch({\n                type: \"ADD_WRONG_ANSWER\",\n                payload: props.items[props.currentGameValue]\n              });\n              //will tell you to keep trying until you get it correct to move onto the next item\n            } else if (\n              dropResult &&\n              dropResult.name !== item.name &&\n              firstTry === false\n            ) {\n              props.dispatch({\n                type: \"INCORRECT_ANSWER\"\n              });\n            } else if (\n              dropResult &&\n              dropResult.name == item.name &&\n              firstTry === false\n            ) {\n              //increments game value so the next item in the reducer is displayed\n              props.dispatch({\n                type: \"INCREMENT_CURRENT_GAME_VALUE\"\n              });\n              firstTry = true;\n            }\n          }\n          //if block for receptacle animations\n\n          //animates garbage can if the player is correct\n          if (\n            dropResult &&\n            dropResult.name == item.name &&\n            dropResult.name === \"garbage\"\n          ) {\n            props.dispatch({ type: \"ANIMATE_GARBAGE_CORRECT\" });\n            setTimeout(() => {\n              //resets animation value after 2 seconds\n              props.dispatch({ type: \"DEANIMATE_GARBAGE\" });\n            }, 2000);\n            //animates garbage if player is wrong\n          } else if (\n            dropResult &&\n            dropResult.name !== item.name &&\n            dropResult.name === \"garbage\"\n          ) {\n            props.dispatch({ type: \"ANIMATE_GARBAGE_INCORRECT\" });\n            setTimeout(() => {\n              //resets animation value after 2 seconds\n              props.dispatch({ type: \"DEANIMATE_GARBAGE\" });\n            }, 2000);\n            //animates recycling if player is correct\n          } else if (\n            dropResult &&\n            dropResult.name == item.name &&\n            dropResult.name === \"recycle\"\n          ) {\n            props.dispatch({ type: \"ANIMATE_RECYCLE_CORRECT\" });\n            setTimeout(() => {\n              //resets animation value after 2 seconds\n              props.dispatch({ type: \"DEANIMATE_RECYCLE\" });\n            }, 2000);\n            //animates recycling if player is incorrect\n          } else if (\n            dropResult &&\n            dropResult.name !== item.name &&\n            dropResult.name === \"recycle\"\n          ) {\n            props.dispatch({ type: \"ANIMATE_RECYCLE_INCORRECT\" });\n            setTimeout(() => {\n              //resets animation value after 2 seconds\n              props.dispatch({ type: \"DEANIMATE_RECYCLE\" });\n            }, 2000);\n            //animates compost if player is correct\n          } else if (\n            dropResult &&\n            dropResult.name == item.name &&\n            dropResult.name === \"compost\"\n          ) {\n            props.dispatch({ type: \"ANIMATE_COMPOST_CORRECT\" });\n            setTimeout(() => {\n              //resets animation value after 2 seconds\n              props.dispatch({ type: \"DEANIMATE_COMPOST\" });\n            }, 2000);\n            //animates compost if player is incorrect\n          } else if (\n            dropResult &&\n            dropResult.name !== item.name &&\n            dropResult.name === \"compost\"\n          ) {\n            props.dispatch({ type: \"ANIMATE_COMPOST_INCORRECT\" });\n            setTimeout(() => {\n              //resets animation value after 2 seconds\n              props.dispatch({ type: \"DEANIMATE_COMPOST\" });\n            }, 2000);\n          } else {\n            return;\n          }\n        }\n      },\n      (connect, monitor) => ({\n        connectDragSource: connect.dragSource(),\n        isDragging: monitor.isDragging()\n      })\n    )(DraggableItem)\n  )\n);\n\nexport default DragNDrop;\n","import React, {Component} from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport amber from \"@material-ui/core/colors/green\";\nimport ErrorIcon from \"@material-ui/icons/Error\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst variantIcon = {\n  error: ErrorIcon\n};\n\nconst styles1 = theme => ({\n  error: {\n    backgroundColor: \"#ff9900\",\n    minWidth: \"fit-content\"\n  },\n  icon: {\n    fontSize: 20\n  },\n  iconVariant: {\n    opacity: 0.9,\n    marginRight: theme.spacing.unit\n  },\n  message: {\n    display: \"flex\",\n    alignItems: \"center\"\n  },\n  message: {\n    fontSize: \"1.5rem\",\n    width: \"100%\"\n  },\n  snackBar: {\n    width: \"100%\"\n  }\n});\n\nfunction MySnackbarContent(props) {\n  const { classes, className, message, onClose, variant, ...other } = props;\n  const Icon = variantIcon[variant];\n\n  return (\n    <SnackbarContent\n      className={classNames(classes[variant], className)}\n      aria-describedby='client-snackbar'\n      message={\n        <span id='client-snackbar' className={classes.message}>\n          <Icon className={classNames(classes.icon, classes.iconVariant)} />\n          {message}\n        </span>\n      }\n      {...other}\n    />\n  );\n}\n\nMySnackbarContent.propTypes = {\n  classes: PropTypes.object.isRequired,\n  className: PropTypes.string,\n  message: PropTypes.node,\n  onClose: PropTypes.func,\n  variant: PropTypes.oneOf([\"success\", \"warning\", \"error\", \"info\"]).isRequired\n};\n\nconst MySnackbarContentWrapper = withStyles(styles1)(MySnackbarContent);\n\nconst styles2 = theme => ({\n  margin: {\n    margin: theme.spacing.unit\n  }\n});\n\nclass IncorrectSnackBar extends Component {\n\n\n  handleClose = () => {\n    this.props.dispatch({\n      type: \"CLOSE_INCORRECT_SNACK_BAR\"\n    });\n  };\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div>\n        <Snackbar\n          className={classes.snackBar}\n          anchorOrigin={{\n            vertical: \"bottom\",\n            horizontal: \"center\"\n          }}\n          open={this.props.store.incorrectSnackBarReducer}\n          autoHideDuration={700}\n          onClose={this.handleClose}>\n          <MySnackbarContentWrapper\n            className={classes.message}\n            onClose={this.handleClose}\n            variant='error'\n            message='TRY AGAIN!'\n          />\n        </Snackbar>\n        {/* <MySnackbarContentWrapper\n          variant='success'\n          className={classes.margin}\n          message='This is a success message!'\n        /> */}\n      </div>\n    );\n  }\n}\n\nIncorrectSnackBar.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = store => ({\n  store\n});\n\nexport default connect(mapStateToProps)(withStyles(styles2)(IncorrectSnackBar));\n","import React, {Component} from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport green from \"@material-ui/core/colors/green\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst variantIcon = {\n  success: CheckCircleIcon\n};\n\nconst styles1 = theme => ({\n  success: {\n    backgroundColor: green[600],\n    minWidth: \"fit-content\"\n  },\n  icon: {\n    fontSize: 20\n  },\n  iconVariant: {\n    opacity: 0.9,\n    marginRight: theme.spacing.unit\n  },\n  message: {\n    display: \"flex\",\n    alignItems: \"center\"\n  },\n  message: {\n    fontSize: \"1.5rem\",\n    width: \"100%\",\n  },\n  snackBar: {\n      width: \"100%\"\n  }\n});\n\nfunction MySnackbarContent(props) {\n  const { classes, className, message, onClose, variant, ...other } = props;\n  const Icon = variantIcon[variant];\n\n  return (\n    <SnackbarContent\n      className={classNames(classes[variant], className)}\n      aria-describedby='client-snackbar'\n      message={\n        <span id='client-snackbar' className={classes.message}>\n          <Icon className={classNames(classes.icon, classes.iconVariant)} />\n          {message}\n        </span>\n      }\n      action={[\n        <IconButton\n          key='close'\n          aria-label='Close'\n          color='inherit'\n          className={classes.close}\n          onClick={onClose}>\n        </IconButton>\n      ]}\n      {...other}\n    />\n  );\n}\n\nMySnackbarContent.propTypes = {\n  classes: PropTypes.object.isRequired,\n  className: PropTypes.string,\n  message: PropTypes.node,\n  onClose: PropTypes.func,\n  variant: PropTypes.oneOf([\"success\", \"warning\", \"error\", \"info\"]).isRequired\n};\n\nconst MySnackbarContentWrapper = withStyles(styles1)(MySnackbarContent);\n\nconst styles2 = theme => ({\n  margin: {\n    margin: theme.spacing.unit\n  }\n});\n\nclass CorrectSnackBar extends Component {\n\n\n  handleClose = () => {\n    this.props.dispatch({\n      type: \"CLOSE_CORRECT_SNACK_BAR\"\n    });\n  };\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div>\n        <Snackbar\n          className={classes.snackBar}\n          anchorOrigin={{\n            vertical: \"bottom\",\n            horizontal: \"center\"\n          }}\n          open={this.props.store.correctSnackBarReducer}\n          autoHideDuration={700}\n          onClose={this.handleClose}>\n          <MySnackbarContentWrapper\n            className={classes.message}\n            onClose={this.handleClose}\n            variant='success'\n            message='CORRECT!'\n          />\n        </Snackbar>\n        {/* <MySnackbarContentWrapper\n          variant='success'\n          className={classes.margin}\n          message='This is a success message!'\n        /> */}\n      </div>\n    );\n  }\n}\n\nCorrectSnackBar.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = store => ({\n  store\n});\n\nexport default connect(mapStateToProps)(withStyles(styles2)(CorrectSnackBar));\n","import React, { Component } from 'react';\nimport Modal from '@material-ui/core/Modal';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport Button from '@material-ui/core/Button';\n\nfunction Transition(props) {\n    return <Slide direction=\"up\" {...props} />;\n}\n\nconst styles = {\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: 'white',\n        opacity: .9\n    },\n    modalHeader: {\n        border: '3px solid black',\n        backgroundColor: 'green',\n        width: 500,\n        height: 300,\n        textAlign: 'center',\n        opacity: 1,\n        borderRadius: 50,\n        fontWeight: 800,\n        margin: 'auto',\n        justifyContent: 'center',\n        display: 'flex'\n    },\n    dialogText: {\n        fontWeight: 800,\n        margin: 'auto',\n        textAlign: 'center',\n        fontSize: 70,\n        color: 'black'\n    },\n    dialogBox: {\n        height: 400,\n        width: 400\n    }\n}\n\nclass StartGameModal extends Component {\n\n    state = {\n        open: true,\n    }\n\n    handleOpen = () => {\n        this.setState({ open: true });\n    };\n\n    handleClose = () => {\n        this.setState({ open: false });\n        this.props.handleTimerStart()\n    };\n\n    render() {\n        return (\n            // <div\n            //     onClick={this.props.handleTimerStart}\n            //     className={this.props.classes.modal}>\n            //     <Modal\n\n            //         className={this.props.classes.modal}\n            //         aria-labelledby=\"simple-modal-title\"\n            //         aria-describedby=\"simple-modal-description\"\n            //         open={this.state.open}\n            //         onClose={this.handleClose}\n            //     >\n            //         <div>\n            //             <Typography className={this.props.classes.modalHeader} variant=\"h1\" id=\"modal-title\">\n            //                 START GAME\n            // </Typography>\n            //             {/* <Typography variant=\"subtitle1\" id=\"simple-modal-description\">\n            //                 Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\n            // </Typography> */}\n            //             {/* <SimpleModalWrapped /> */}\n            //         </div>\n            //     </Modal>\n            // </div>\n            <div\n                onClick={this.handleClose}>\n                <Dialog\n                    open={this.state.open}\n                    TransitionComponent={Transition}\n                    keepMounted\n                    // onClose={this.handleClose}\n                    aria-labelledby=\"alert-dialog-slide-title\"\n                    aria-describedby=\"alert-dialog-slide-description\"\n                >\n                    <div className={this.props.classes.dialogBox}>\n                        <DialogContent>\n                            <DialogContentText\n                                className={this.props.classes.dialogText}\n                                id=\"alert-dialog-slide-description\">\n                                CLICK TO START GAME\n            </DialogContentText>\n                        </DialogContent>\n                    </div>\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles)(StartGameModal);","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport GarbageBin from \"../GarbageBin/GarbageBin\";\nimport CompostBin from \"../CompostBin/CompostBin\";\nimport RecycleBin from \"../RecycleBin/RecycleBin\";\nimport DraggableItem from \"../DraggableItem/DraggableItem\";\nimport IncorrectSnackBar from \"./IncorrectSnackBar\";\nimport CorrectSnackBar from \"./CorrectSnackBar\";\nimport StartGameModal from '../StartGameModal/StartGameModal';\n\n\n//Material UI Components\nimport Button from \"@material-ui/core/Button\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { Grid } from \"@material-ui/core\";\nimport Typography from '@material-ui/core/Typography';\nimport Modal from '@material-ui/core/Modal';\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\n//animation components\nimport styled, { keyframes } from \"styled-components\";\nimport { shake, bounce } from \"react-animations\";\n\nconst styles = {\n  Button: {\n    backgroundColor: \"green\",\n    color: \"white\",\n    border: \"2px solid black\",\n    fontSize: \"calc(10px + 2vmin)\",\n    height: 500,\n    width: 500\n  },\n  bin: {\n    width: \"100px\",\n    height: \"100px\",\n    backgroundColor: \"red\",\n    border: \"1px solid black\",\n    float: \"left\",\n    margin: \"5px\"\n  },\n  item: {\n    width: \"50px\",\n    height: \"50px\",\n    backgroundColor: \"green\",\n    border: \"1px solid black\",\n    padding: \"5px\",\n    margin: \"50px\",\n    \"&:hover\": {\n      // change to both KEY and the\n      // textDecoration: \"underline\",\n      backgroundColor: \"yellow\",\n      color: \"black\"\n    }\n  },\n  scoreboard: {\n    fontFamily: 'scoreboard',\n    color: 'gold',\n    blur: 20,\n    padding: 4,\n    margin: 'auto',\n    textAlign: 'center'\n  },\n  scoreboardBackground: {\n    backgroundColor: 'black',\n    width: 500,\n    borderRadius: 10,\n    border: '2px solid gold'\n  },\n  scoreboardHolder: {\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  scoreboardSmallText: {\n    fontFamily: 'scoreboard',\n    color: 'gold',\n    blur: 20,\n    padding: 4,\n    margin: 'auto',\n    textAlign: 'center',\n    fontSize: 30\n  },\n  scoreboardGameItemText: {\n    fontFamily: 'scoreboard',\n    color: 'gold',\n    blur: 20,\n    padding: 4,\n    margin: 'auto',\n    textAlign: 'center',\n    fontSize: 50\n  },\n  timerText: {\n\n  },\n  itemName: {\n    backgroundColor: 'tan',\n    margin: 'auto',\n    textAlign: 'center',\n    width: 200,\n  },\n  gameItem: {\n    margin: 'auto'\n  }\n};\n\n//animation for incorrect guess\nconst Shake = styled.div`\n  animation: 0.75s ${keyframes`${shake}`};\n`;\n//animation for correct guess\nconst Bounce = styled.div`\n  animation: 0.75s ${keyframes`${bounce}`};\n`;\n\nclass Game extends Component {\n  state = {\n    score: 0,\n    time: 0,\n    firstTry: true,\n    gameStarted: false,\n    open: true,\n  };\n\n  componentDidMount() {\n    this.props.dispatch({\n      type: \"FETCH_GAME_ITEMS\"\n    })\n  }\n\n  //stops timer when game is completed\n  componentWillUnmount() {\n    clearInterval(this.timer)\n  }\n\n  handleTimerStart = () => {\n    this.setState({\n      gameStarted: true\n    });\n    //increases time 1 second, every second\n    this.timer = setInterval(\n      () =>\n        this.setState({\n          time: this.state.time + 1\n        }),\n      1000\n    );\n  };\n\n\n//send user to results screen after finishing with last item\n  goToResults = () => {\n    if (this.props.currentGameValue > this.props.gameItemsReducer.length - 1) {\n      this.props.history.push(\"/results\");\n    }\n  };\n\n  // route the user back to the home page\n  backToHome = () => {\n    this.props.history.push(\"/\");\n  };\n\n  // route the user back to the how to play page\n  howToPlay = () => {\n    this.props.history.push(\"/howtoplay\");\n  };\n\n  toReady = () => {\n    this.props.history.push(\"/gamelaunch\");\n  };\n\n  render() {\n    return (\n      <div className={this.props.classes.background}>\n        <div className={this.props.classes.scoreboardHolder}>\n          <header className={this.props.classes.scoreboardBackground}>\n            <div>\n              <Grid\n                container>\n                <Typography className={this.props.classes.scoreboard} variant=\"h1\">\n                  Score : {this.props.gameScore}\n                </Typography>\n              </Grid>\n              <Grid\n                container\n                justify={\"space-evenly\"}\n                spacing={12}\n                alignItems={\"center\"}>\n                {/* conditionally render items remaining based on length of array, use 0 if no items */}\n                <Typography className={this.props.classes.scoreboardSmallText}>Items Remaining:{15 - this.props.currentGameValue}\n                </Typography>\n                <Typography className={this.props.classes.scoreboardSmallText}>Elapsed Time:\n                <span className={this.props.classes.timerText}>{this.state.time}</span>\n                </Typography>\n              </Grid>\n              <Grid\n                container\n                justify={\"space-evenly\"}\n                spacing={12}\n                alignItems={\"center\"}>\n                {/* conditionally render items remaining based on length of array, use 0 if no items */}\n                <Typography className={this.props.classes.scoreboardGameItemText}>{this.props.gameItems[this.props.currentGameValue].name}\n                </Typography>\n              </Grid>\n            </div>\n          </header>\n        </div>\n\n        <div>\n          <br />\n          <Grid\n            container\n            alignItems={\"center\"}\n          >\n            <div className={this.props.classes.gameItem}>\n              {/* Checks to see if the player is using a compost bin or not and conditionally renders it based on the value in the compostBin reducer */}\n              {this.props.gameItems[this.props.currentGameValue]\n                .receptacle === \"compost\" && !this.props.compostBin ? (\n                  this.props.gameItems[this.props.currentGameValue]\n                    .receptacle && (\n                    <DraggableItem\n                      name={\"garbage\"}\n                      backgroundImageURL={\n                        this.props.gameItems[this.props.currentGameValue].url\n                      }\n                      itemId={\n                        this.props.gameItems &&\n                        this.props.gameItems[this.props.currentGameValue].id\n                      }\n                      goToResults={this.goToResults}\n                      gameTime={this.state.time}\n                    />\n                  )\n                ) : (\n                  <DraggableItem\n                    name={\n                      this.props.gameItems[this.props.currentGameValue]\n                        .receptacle\n                    }\n                    backgroundImageURL={\n                      this.props.gameItems[this.props.currentGameValue].url\n                    }\n                    itemId={\n                      this.props.gameItems &&\n                      this.props.gameItems[this.props.currentGameValue].id\n                    }\n                    goToResults={this.goToResults}\n                    gameTime={this.state.time}\n                  />\n                )}\n            </div>\n          </Grid>\n        </div>\n        <footer>\n          <Grid\n            container\n            justify={\"space-evenly\"}\n            spacing={48}\n            alignItems={\"center\"}>\n            {/* 1 is the resting state of the receptacles, 2 is the correct state and causes receptacles to bounce, 3 is the incorrect state and causes the receptacles to shake */}\n            {this.props.garbageAnimate === 1 ? <GarbageBin /> : null}\n            {this.props.garbageAnimate === 2 ? (\n              <Bounce>\n                <GarbageBin />\n              </Bounce>\n            ) : null}\n            {this.props.garbageAnimate === 3 ? (\n              <Shake>\n                <GarbageBin />\n              </Shake>\n            ) : null}\n            {/* Conditional Render of recycle bins with animations*/}\n            {this.props.recycleAnimate === 1 ? <RecycleBin /> : null}\n            {this.props.recycleAnimate === 2 ? (\n              <Bounce>\n                <RecycleBin />\n              </Bounce>\n            ) : null}\n            {this.props.recycleAnimate === 3 ? (\n              <Shake>\n                <RecycleBin />\n              </Shake>\n            ) : null}\n\n            {this.props.compostBin === true &&\n              this.props.compostAnimate === 1 ? (\n                <CompostBin />\n              ) : null}\n            {this.props.compostBin === true &&\n              this.props.compostAnimate === 2 ? (\n                <Bounce>\n                  <CompostBin />\n                </Bounce>\n              ) : null}\n            {this.props.compostBin === true &&\n              this.props.compostAnimate === 3 ? (\n                <Shake>\n                  <CompostBin />\n                </Shake>\n              ) : null}\n          </Grid>\n          <StartGameModal handleTimerStart={this.handleTimerStart} />\n          <CorrectSnackBar />\n          <IncorrectSnackBar />\n        </footer>\n      </div>\n    );\n  }\n}\n\n// mapping the state to props\nconst mapStateToProps = reduxStore => {\n  return {\n    reduxStore,\n    gameItems: reduxStore.gameItemsReducer,\n    compostBin: reduxStore.compostBinReducer,\n    currentGameValue: reduxStore.currentGameValueReducer,\n    gameScore: reduxStore.gameScoreReducer,\n    garbageAnimate: reduxStore.animateGarbageReducer,\n    recycleAnimate: reduxStore.animateRecycleReducer,\n    compostAnimate: reduxStore.animateCompostReducer,\n    gameTime: reduxStore.gameTimeReducer\n  };\n};\n\n//exports the component\nexport default connect(mapStateToProps)(withStyles(styles)(Game));\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport wasteWiseLogo from \"../../img/WasteWiselogo.jpg\";\n\n//Material UI\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { Grid } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/paper\";\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\n\nconst styles = {\n  link: {\n    fontSize: 31,\n    padding: \"30px\",\n    color: \"black\",\n    \"&:hover\": {\n      color: \"white\"\n    },\n    backgroundColor: \"green\",\n    opacity: 0.9,\n    borderRadius: \"10px\"\n  },\n  p: {\n    fontSize: 18,\n    padding: \"30px\",\n    color: \"black\"\n  },\n  a: {\n    fontSize: 30,\n    padding: \"30px\",\n    color: \"black\"\n  },\n  mainDiv: {\n    backgroundColor: \"lightGrey\",\n    opacity: 0.95,\n    textAlign: \"center\"\n  },\n  Button: {\n    backgroundColor: \"green\",\n    width: \"30%\",\n    height: \"10%\",\n    fontSize: \"1.3em\",\n    opacity: \"1\",\n    marginTop: \"50px\",\n    marginBottom: \"50px\",\n    \"&:hover\": {\n      backgroundColor: \"darkgreen\",\n      color: \"white\"\n    },\n    resourcesButton: {\n      padding: \"4px\"\n    }\n  }\n};\n\nclass Resources extends Component {\n  goToWasteWise = () => {\n    window.open(\n      \"https://www.mnchamber.com/your-opportunity/waste-wise\",\n      \"_blank\"\n    );\n  };\n\n  render() {\n    return (\n      <Paper className={this.props.classes.mainDiv}>\n        <Grid container justify={\"center\"}>\n          <p className={this.props.classes.a}>\n            {\" \"}\n            Want to learn more? Visit the MN Waste Wise website\n          </p>\n        </Grid>\n        <Grid container justify={\"center\"}>\n          <a href=\"https://www.mnchamber.com/your-opportunity/waste-wise\" target=\"_blank\">\n          <img\n            src={wasteWiseLogo}\n            alt=\"Waste Wise logo\"\n            height=\"525px\"\n            width=\"500px\"\n          />\n          </a>\n        </Grid>\n        <Button\n          className={this.props.classes.Button}\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => this.props.history.push(\"/resourcecredits\")}\n        >\n          Credits\n        </Button>\n      </Paper>\n    );\n  }\n}\n\nconst mapStateToProps = reduxStore => {\n  return {\n    reduxStore\n  };\n};\n\nexport default connect(mapStateToProps)(withStyles(styles)(Resources));\n","import React, { Component } from \"react\";\n\n//Material UI components\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\n//this is the list from the database of registered / logged in users who have played through the game and are part of the leaderboard. \nclass LeaderboardList extends Component {\n    render() {\n        return (\n          <TableRow>\n            <TableCell>{this.props.i + 1}</TableCell>\n            <TableCell>\n              {this.props.player.first_name} {this.props.player.last_name}\n            </TableCell>\n            <TableCell>{this.props.player.score}</TableCell>\n            <TableCell>{this.props.player.time}</TableCell>\n            <TableCell>{this.props.player.team_name}</TableCell>\n          </TableRow>\n        );\n    }\n}\n\nexport default LeaderboardList;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport LeaderboardList from \"../LeaderboardList/LeaderboardList\";\n\n//Material UI Components\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\n\n//Material UI styles\nconst styles = theme => ({\n  grid: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  button: {\n    width: '50%',\n    backgroundColor: \"green\",\n    color: \"white\"\n  }\n});\n\nclass Leaderboard extends Component {\n  componentDidMount() {\n    this.getLeaderboardInfo();\n  };\n\n  componentDidUpdate(prevProps) {\n    if (this.props.store !== prevProps.store) {\n      this.getLeaderboardInfo();\n    }\n  }\n\n  getLeaderboardInfo() {\n    let contestIdNumber = this.props.history.location.search.split(\"=\").pop();\n    this.props.dispatch({\n      type: \"FETCH_LEADERBOARD\",\n      payload: this.props.store.companyIdNumberReducer\n      // payload: contestIdNumber\n    });\n  }\n//playAgain brings the user back to the gamelaunch page where they can choose to continue playing or if they want to register for a contest then they can play in a contest.\n  playAgain = () => {\n    if (this.props.history.location.search) {\n      this.props.history.push(`/gamelaunch${this.props.history.location.search}`)\n    } else {\n      this.props.history.push(\"/gamelaunch\");\n    }\n  };\n//below is the leaderboard which is able to show the user's rank, name, score, time, and which department they are from.\n  render() {\n    const { classes } = this.props;\n    return (\n      <>\n        <Grid container spacing={24}>\n          <Grid item xs></Grid>\n          <Grid item xs={6}>\n            <div className={classes.grid}>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                className={classes.button}\n                onClick={this.playAgain}\n              >\n                PLAY AGAIN\n              </Button>\n              <br />\n              <br />\n            </div>\n            <Paper>\n            <div className={classes.grid}>\n              <h1>Contest Leaderboard</h1>\n            </div>\n            \n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Rank</TableCell>\n                    <TableCell>Name</TableCell>\n                    <TableCell>Score</TableCell>\n                    <TableCell>Time</TableCell>\n                    <TableCell>Department</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {this.props.store.leaderboardReducer.map((player, i) => {\n                    return <LeaderboardList player={player} i={i} />;\n                  })}\n                </TableBody>\n              </Table>\n            </Paper>\n          </Grid>\n          <Grid item xs>\n            <Paper className={classes.paper}></Paper>\n          </Grid>\n        </Grid>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = store => ({\n  store\n});\n\nexport default withStyles(styles)(connect(mapStateToProps)(Leaderboard));\n","//Imports (React, Material-UI, Redux)\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { Card, CardActions, CardContent, Grid, TextField } from \"@material-ui/core\";\nimport { Edit, Cancel, Save } from '@material-ui/icons';\nimport { withStyles } from '@material-ui/styles';\nimport { connect } from 'react-redux';\n\n//Styles for Material-UI Components\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    card: {\n        textAlign: 'center',\n        background: '#fff',\n        color: 'black',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    cardHeader: {\n        fontSize: 20,\n        fontWeight: 'bold'\n    },\n    cardContent: {\n        fontSize: 24\n    },\n    h1: {\n        textAlign: 'right'\n    },\n    icon: {\n        width: 35,\n        height: 35,\n        marginLeft: 10,\n        marginBottom: -8,\n    },\n    fieldLarge: {\n        margin: 5,\n        width: 490,\n        '&:hover:not($disabled):not($cssFocused):not($error) $notchedOutline': {\n            borderColor: \"black\"\n        }\n    },\n    input: {\n        color: \"black\"\n    },\n    cssLabel: {\n        '&$cssFocused': {\n            color: \"black\",\n        },\n    },\n    cssOutlinedInput: {\n        '&$cssFocused $notchedOutline': {\n            borderColor: \"black\",\n        },\n    },\n    cssFocused: {},\n    notchedOutline: { borderColor: \"black\" }\n});\n\nclass OrganizationName extends Component {\n\n    state = {\n        organizationNameEdit: false,\n        organizationName: ''\n    }\n\n    //Fetches organization info and loads to the DOM\n    componentDidMount() {\n        this.getOrganization();\n    }\n\n    //Gets current user's organization from the database\n    getOrganization() {\n        this.props.dispatch({\n            type: 'FETCH_ORGANIZATION'\n        })\n    }\n\n    //Conditionally renders the Organization Name field for edits\n    toggleOrganizationNameEdit = () => {\n        this.setState({\n            organizationName: this.props.organization.organization_name\n        })\n        this.setState({\n            organizationNameEdit: !this.state.organizationNameEdit\n        })\n    }\n\n    //Saves any changes to form fields to state as users make edits\n    handleChangeFor = (propertyName) => (event) => {\n        this.setState({\n            [propertyName]: event.target.value\n        });\n    }\n\n    //Handles PUT request to save a name change to the Organization Name\n    handleOrganizationNameSave = () => {\n        this.props.dispatch({\n            type: 'UPDATE_ORGANIZATION_NAME',\n            payload: this.state\n        })\n        this.toggleOrganizationNameEdit()\n    }\n\n    render() {\n\n        //Allows for classes when using Material-UI styling.\n        const { classes } = this.props\n\n        return (\n\n            <Grid container spacing={4} justify=\"center\">\n                <Grid item sm={3}>\n                </Grid>\n                <Grid item sm={6}>\n                    <Card className={classes.card}>\n                        <CardContent style={{ backgroundColor: \"#EEF1F1\" }}>\n                            <span className={classes.cardHeader}>Organization Name</span>\n                            <br /><br />\n                            <span className={classes.cardContent}>{this.props.organization.organization_name}</span>\n                            {this.state.organizationNameEdit && <br />}\n                            {this.state.organizationNameEdit && <br />}\n                            {this.state.organizationNameEdit &&\n\n                                <TextField\n                                    align=\"left\"\n                                    id=\"outlined-name\"\n                                    label=\"organization name\"\n                                    className={classes.fieldLarge}\n                                    value={this.state.organizationName}\n                                    onChange={this.handleChangeFor('organizationName')}\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                    InputProps={{\n                                        className: classes.input,\n                                        classes: {\n                                            root: classes.cssOutlinedInput,\n                                            focused: classes.cssFocused,\n                                            notchedOutline: classes.notchedOutline,\n                                        }\n                                    }}\n                                    InputLabelProps={{\n                                        className: classes.input,\n                                        shrink: true\n                                    }}\n                                />\n                            }\n                        </CardContent>\n                        <CardActions style={{ backgroundColor: \"#EEF1F1\" }}>\n                            {!this.state.organizationNameEdit &&\n                                <Button color=\"secondary\" onClick={this.toggleOrganizationNameEdit} style={{ marginRight: 20, marginLeft: 0 }}>\n                                    <Edit style={{ marginRight: 3 }} />Edit\n                         </Button>}\n                            {this.state.organizationNameEdit &&\n                                <Button color=\"secondary\" onClick={this.toggleOrganizationNameEdit} style={{ marginRight: 20, marginLeft: 0 }}>\n                                    <Cancel style={{ marginRight: 3 }} />Cancel\n                         </Button>}\n                            {this.state.organizationNameEdit &&\n                                <Button onClick={this.handleOrganizationNameSave} style={{ marginLeft: \"auto\", marginRight: 0 }}>\n                                    <Save style={{ marginRight: 3 }} />Save\n                            </Button>}\n                        </CardActions>\n                    </Card>\n                </Grid>\n                <Grid item sm={3}>\n                </Grid>\n            </Grid>\n        )\n\n    }\n\n}\n\nconst mapStateToProps = (reduxStore) => {\n    return {\n        user: reduxStore.user,\n        organization: reduxStore.orgSettings,\n    }\n}\nexport default connect(mapStateToProps)(withStyles(styles)(OrganizationName));","//Imports (React, Material-UI, Redux, SweetAlert)\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { Backdrop, Card, CardActions, CardContent, Grid, Modal, TextField } from \"@material-ui/core\";\nimport { AddCircle, Edit, Cancel, Save, Delete } from '@material-ui/icons';\nimport { withStyles } from '@material-ui/styles';\nimport { connect } from 'react-redux';\nimport Swal from 'sweetalert2';\nimport withReactContent from 'sweetalert2-react-content';\n\n//Declaring SweetAlert for use later in this file\nconst MySwal = withReactContent(Swal)\n\n//Styles for Material-UI Components\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    card: {\n        textAlign: 'center',\n        background: '#fff',\n        color: 'black',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    cardHeader: {\n        fontSize: 20,\n        fontWeight: 'bold',\n    },\n    cardContent: {\n        fontSize: 14\n    },\n    cardContentLeft: {\n        fontSize: 20,\n        width: 10\n    },\n    cardContentIcons: {\n        fontSize: 20,\n        paddingLeft: 5,\n        paddingRight: 5\n    },\n    cardContentTeams: {\n        fontSize: 20,\n        paddingLeft: 8,\n        textAlign: 'left'\n    },\n    icon: {\n        width: 35,\n        height: 35,\n        marginLeft: 10,\n        marginBottom: -8,\n    },\n    fieldLarge: {\n        margin: 5,\n        width: 490,\n        '&:hover:not($disabled):not($cssFocused):not($error) $notchedOutline': {\n            borderColor: \"black\"\n        }\n    },\n    tableTeam: {\n        // marginLeft: 'auto',\n        // marginRight: 'auto'\n    },\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    form: {\n        backgroundColor: '#fff',\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n        color: theme.palette.secondary.main,\n        textAlign: 'center'\n    },\n    input: {\n        color: \"black\"\n    },\n    cssLabel: {\n        '&$cssFocused': {\n            color: \"black\",\n        },\n    },\n    cssOutlinedInput: {\n        '&$cssFocused $notchedOutline': {\n            borderColor: \"black\",\n        },\n    },\n    cssFocused: {},\n    notchedOutline: { borderColor: \"black\" }\n});\n\nclass Teams extends Component {\n\n    state = {\n        teamNameEdit: false,\n        teamName: '',\n        teamNameId: 0,\n        teamEditOpen: false,\n        teamAddOpen: false,\n    }\n\n    //Fetches team and organization info and loads to the DOM\n    componentDidMount() {\n        this.getTeams();\n        this.getOrganization();\n    }\n\n    //Gets teams from database\n    getTeams() {\n        this.props.dispatch({\n            type: 'FETCH_TEAMS'\n        })\n    }\n\n    //Gets current user's organization from the database\n    getOrganization() {\n        this.props.dispatch({\n            type: 'FETCH_ORGANIZATION'\n        })\n    }\n\n    //Saves any changes to form fields to state as users make edits\n    handleChangeFor = (propertyName) => (event) => {\n        this.setState({\n            [propertyName]: event.target.value\n        });\n    }\n\n    //Initializes team fields with its saved values upon edit\n    handleTeamEditOpen = (name, id) => {\n        this.setState({\n            teamEditOpen: !this.state.teamEditOpen,\n            teamName: name,\n            teamNameId: id\n        })\n    };\n\n    //Triggers open of Add New Team open\n    handleTeamAddOpen = () => {\n        this.setState({\n            teamAddOpen: !this.state.teamAddOpen,\n        })\n    };\n\n    //Closes the team modal upon save or cancel\n    handleTeamClose = () => {\n        this.setState({\n            teamEditOpen: false,\n            teamAddOpen: false,\n            teamName: ''\n        })\n    };\n\n    //Performs a PUT (edit) request to change the team name\n    handleEdit = (event) => {\n        event.preventDefault();\n        this.props.dispatch({\n            type: 'UPDATE_TEAM',\n            payload: this.state\n\n        })\n        this.handleTeamClose();\n    }\n\n    //Allows for the delete of a team.  User is asked to confirm this first.\n    handleDelete = (name, id) => {\n        MySwal.fire({\n            title: `Delete the ${name} team?`,\n            text: `${name} will be removed from the system.`,\n            type: 'error',\n            showCancelButton: true,\n            confirmButtonColor: '#3085d6',\n            cancelButtonColor: '#d33',\n            confirmButtonText: 'Delete'\n        }).then((result) => {\n            if (result.value) {\n                this.props.dispatch({\n                    type: 'DELETE_TEAM',\n                    payload: id\n                })\n                Swal.fire(\n                    'Deleted!',\n                    `The ${name} team has been deleted.`,\n                    'success'\n                )\n            }\n        })\n    }\n\n    //Adds new teams to the database\n    handleTeamAdd = (event) => {\n        event.preventDefault();\n        this.props.dispatch({\n            type: 'ADD_TEAM',\n            payload: this.state\n\n        })\n        this.handleTeamClose();\n    }\n\n    render() {\n\n        //Allows for classes when using Material-UI styling.\n        const { classes } = this.props\n\n        //Team list variable, containing a loop to display all teams in the database to the DOM in a table format.\n        let teamList = this.props.team.map(team => {\n            return (\n                <tr>\n                    <td className={classes.cardContentIconsLeft}>\n                        <Button onClick={() => this.handleTeamEditOpen(team.team_name, team.id)}>\n                            <Edit />\n                        </Button>\n                    </td>\n                    <td className={classes.cardContentIcons}>\n                        <Button onClick={() => this.handleDelete(team.team_name, team.id)}>\n                            <Delete />\n                        </Button>\n                    </td>\n                    <td className={classes.cardContentTeams}>\n                        {team.team_name}\n                    </td>\n                </tr>\n            )\n        })\n\n        return (\n            <div>\n                <Grid container spacing={4} justify=\"center\">\n                    <Grid item sm={3}>\n                    </Grid>\n                    <Grid item sm={6}>\n                        <Card className={classes.card}>\n                            <CardActions style={{ backgroundColor: \"#EEF1F1\" }}>\n                                <Grid item sm={5}>\n                                </Grid>\n                                <Grid item sm={2}>\n                                    <span className={classes.cardHeader} style={{ marginLeft: \"auto\" }}>Teams</span>\n                                </Grid>\n                                <Grid item sm={5} style={{ textAlign: \"right\" }}>\n                                    <Button onClick={() => this.handleTeamAddOpen()} style={{ marginLeft: \"auto\", }}>\n                                        <AddCircle style={{ marginRight: 3 }} />Add New Team\n                                    </Button>\n                                </Grid>\n                            </CardActions>\n                            <CardContent style={{ backgroundColor: \"#EEF1F1\" }}>\n                                {!this.props.team[0] &&\n                                    <span className={classes.cardContent}>You have not added any teams.  If you want to spice up the competition within {this.props.organization.organization_name}, begin by adding a new team!</span>\n                                }\n                                {this.props.team[0] && <table className={classes.tableTeam}>\n                                    <thead>\n                                        <tr>\n                                            <th>Edit</th>\n                                            <th>Delete</th>\n                                            <th>Team Name</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {teamList}\n                                    </tbody>\n                                </table>}\n                            </CardContent>\n                        </Card>\n                    </Grid>\n                    <Grid item sm={3}>\n                    </Grid>\n                </Grid>\n\n                <Modal\n                    aria-labelledby=\"edit team\"\n                    aria-describedby=\"edit team\"\n                    className={classes.modal}\n                    open={this.state.teamEditOpen}\n                    onClose={this.handleTeamClose}\n                    closeAfterTransition\n                    BackdropComponent={Backdrop}\n                    BackdropProps={{\n                        timeout: 500,\n                    }}\n                >\n                    <CardContent className={classes.form} style={{ backgroundColor: \"#EEF1F1\" }}>\n\n                        <form onSubmit={this.handleEdit}>\n                            <div>\n                                <TextField\n                                    align=\"left\"\n                                    id=\"outlined-name\"\n                                    label=\"team name\"\n                                    className={classes.fieldLarge}\n                                    value={this.state.teamName}\n                                    onChange={this.handleChangeFor('teamName')}\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                    InputProps={{\n                                        className: classes.input,\n                                        classes: {\n                                            root: classes.cssOutlinedInput,\n                                            focused: classes.cssFocused,\n                                            notchedOutline: classes.notchedOutline,\n                                        }\n                                    }}\n                                    InputLabelProps={{\n                                        className: classes.input,\n                                        shrink: true\n                                    }}\n                                />\n                            </div>\n                            <div>\n                                <Button\n                                    variant=\"contained\"\n                                    name=\"cancel\"\n                                    color=\"secondary\"\n                                    onClick={() => this.handleTeamClose()}\n                                    style={{ marginTop: 10, marginRight: 10 }}>\n                                    <Cancel style={{ marginRight: 3 }} />Cancel\n                                </Button>\n                                <Button\n                                    variant=\"contained\"\n                                    type=\"submit\"\n                                    name=\"submit\"\n                                    color=\"primary\"\n                                    style={{ marginTop: 10 }}>\n                                    <Save style={{ marginRight: 3 }} />Save\n                         </Button>\n                            </div>\n                        </form>\n\n\n\n                    </CardContent>\n                </Modal>\n\n                <Modal\n                    aria-labelledby=\"add team\"\n                    aria-describedby=\"add team\"\n                    className={classes.modal}\n                    open={this.state.teamAddOpen}\n                    onClose={this.handleTeamClose}\n                    closeAfterTransition\n                    BackdropComponent={Backdrop}\n                    BackdropProps={{\n                        timeout: 500,\n                    }}\n                >\n                    <CardContent className={classes.form} style={{ backgroundColor: \"#EEF1F1\" }}>\n\n                        <form onSubmit={this.handleTeamAdd}>\n                            <div>\n                                <TextField\n                                    align=\"left\"\n                                    id=\"outlined-name\"\n                                    label=\"team name\"\n                                    className={classes.fieldLarge}\n                                    value={this.state.teamName}\n                                    onChange={this.handleChangeFor('teamName')}\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                    InputProps={{\n                                        className: classes.input,\n                                        classes: {\n                                            root: classes.cssOutlinedInput,\n                                            focused: classes.cssFocused,\n                                            notchedOutline: classes.notchedOutline,\n                                        }\n                                    }}\n                                    InputLabelProps={{\n                                        className: classes.input,\n                                        shrink: true\n                                    }}\n                                />\n                            </div>\n                            <div>\n                                <Button\n                                    variant=\"contained\"\n                                    name=\"cancel\"\n                                    color=\"secondary\"\n                                    onClick={() => this.handleTeamClose()}\n                                    style={{ marginTop: 10, marginRight: 10 }}>\n                                    <Cancel style={{ marginRight: 3 }} />Cancel\n                                </Button>\n                                <Button\n                                    variant=\"contained\"\n                                    type=\"submit\"\n                                    name=\"submit\"\n                                    color=\"primary\"\n                                    style={{ marginTop: 10 }}>\n                                    <Save style={{ marginRight: 3 }} />Save\n                                </Button>\n                            </div>\n                        </form>\n\n\n\n                    </CardContent>\n                </Modal>\n\n            </div>\n        )\n\n    }\n\n}\n\nconst mapStateToProps = (reduxStore) => {\n    return {\n        user: reduxStore.user,\n        team: reduxStore.teamSettings,\n        organization: reduxStore.orgSettings,\n    }\n}\nexport default connect(mapStateToProps)(withStyles(styles)(Teams));","//Imports (React, Material-UI, Redux, SweetAlert)\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { Backdrop, Card, CardActions, CardContent, FormControl, FormControlLabel, FormLabel, Grid, MenuItem, Modal, Radio, RadioGroup, TextField } from \"@material-ui/core\";\nimport { AddCircle, Edit, Cancel, Save, Delete, Link, Close } from '@material-ui/icons';\nimport { withStyles } from '@material-ui/styles';\nimport { connect } from 'react-redux';\nimport Swal from 'sweetalert2';\nimport withReactContent from 'sweetalert2-react-content';\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\n\n//Declaring SweetAlert for use later in this file\nconst MySwal = withReactContent(Swal)\n\n//Styles for Material-UI Components\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    close: {\n        padding: theme.spacing.unit / 2\n    },\n    card: {\n        textAlign: 'center',\n        background: '#fff',\n        color: 'black',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    cardHeader: {\n        fontSize: 20,\n        fontWeight: 'bold'\n    },\n    cardContent: {\n        fontSize: 14\n    },\n    cardContentLeft: {\n        fontSize: 20,\n        width: 10\n    },\n    cardContentIcons: {\n        fontSize: 20,\n        paddingLeft: 5,\n        paddingRight: 5\n    },\n    cardContentContest: {\n        fontSize: 20,\n        paddingLeft: 8,\n        textAlign: 'align'\n    },\n    icon: {\n        width: 35,\n        height: 35,\n        marginLeft: 10,\n        marginBottom: -8,\n    },\n    fieldMedium: {\n        margin: 5,\n        width: 240,\n        '&:hover:not($disabled):not($cssFocused):not($error) $notchedOutline': {\n            borderColor: \"black\"\n        }\n    },\n    fieldLarge: {\n        margin: 5,\n        width: 490,\n        '&:hover:not($disabled):not($cssFocused):not($error) $notchedOutline': {\n            borderColor: \"black\"\n        }\n    },\n    edit: {\n        width: \"10%\"\n    },\n    delete: {\n        width: \"10%\"\n    },\n    contestName: {\n        width: \"55%\"\n    },\n    contestLink: {\n        width: \"25%\"\n    },\n    td: {\n        textAlign: \"center\"\n    },\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    form: {\n        backgroundColor: '#fff',\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n        color: theme.palette.secondary.main,\n        textAlign: 'center'\n    },\n    input: {\n        color: \"black\"\n    },\n    cssLabel: {\n        '&$cssFocused': {\n            color: \"black\",\n        },\n    },\n    cssOutlinedInput: {\n        '&$cssFocused $notchedOutline': {\n            borderColor: \"black\",\n        },\n    },\n    cssFocused: {},\n    notchedOutline: { borderColor: \"black\" }\n});\n\nclass Contests extends Component {\n\n    state = {\n        contestName: '',\n        contestStartDate: '',\n        contestStartTime: 0,\n        contestEndDate: '',\n        contestEndTime: 0,\n        contestNameId: 0,\n        contestCompostBin: false,\n        contestAccessCode: '',\n        contestEditOpen: false,\n        contestAddOpen: false,\n        snackBarShowOpen: false,\n    }\n\n    //Load contests to the DOM\n    componentDidMount() {\n        this.getContests();\n    }\n\n    //Function to get the contests, included in componentDidMount\n    getContests() {\n        this.props.dispatch({\n            type: 'FETCH_CONTESTS'\n        })\n    }\n\n    //Saves any changes to form fields to state as users make edits\n    handleChangeFor = (propertyName) => (event) => {\n        this.setState({\n            [propertyName]: event.target.value\n        });\n    }\n\n    //Initializes contest fields with its saved values upon edit\n    handleContestEditOpen = (name, startDate, startTime, endDate, endTime, compost, id) => {\n        this.setState({\n            contestEditOpen: !this.state.contestEditOpen,\n            contestName: name,\n            contestStartDate: startDate,\n            contestStartTime: startTime,\n            contestEndDate: endDate,\n            contestEndTime: endTime,\n            contestCompostBin: compost ? \"true\" : \"false\",\n            contestNameId: id\n        })\n    };\n\n    //Triggers display of modal with form to enter new contest information\n    handleContestAddOpen = () => {\n        this.setState({\n            contestAddOpen: !this.state.contestAddOpen,\n        })\n    };\n\n    //Closes the modal for the contest\n    handleContestClose = () => {\n        this.setState({\n            contestEditOpen: false,\n            contestAddOpen: false,\n            contestName: '',\n            contestStartDate: '',\n            contestStartTime: '',\n            contestEndDate: '',\n            contestEndTime: '',\n            contestAccessCode: '',\n            contestCompostBin: '',\n        })\n    };\n\n    //Handles PUT request (edit) of contest details for a specific contest\n    handleEdit = (event) => {\n        event.preventDefault();\n        this.props.dispatch({\n            type: 'UPDATE_CONTEST',\n            payload: this.state\n        })\n        this.handleContestClose();\n    }\n\n    //Handles POST request of contest details to enter a brand new contest\n    handleAdd = (event) => {\n        event.preventDefault();\n        this.generateAccessId();\n        this.props.dispatch({\n            type: 'ADD_CONTEST',\n            payload: this.state\n        })\n        this.handleContestClose();\n    }\n\n    //Generates a random, nine-digit number to be used as the Contest ID\n    generateAccessId() {\n        this.state.contestAccessCode = Math.floor(Math.random() * 900000000) + 100000000;\n    }\n\n    //Handles the delete for a contest from the database, with a SweetAlert requiring users to confirm their decisions\n    handleDelete = (name, id) => {\n        MySwal.fire({\n            title: `Delete the ${name} contest?`,\n            text: `${name} will be removed from the system.`,\n            type: 'error',\n            showCancelButton: true,\n            confirmButtonColor: '#3085d6',\n            cancelButtonColor: '#d33',\n            confirmButtonText: 'Delete'\n        }).then((result) => {\n            if (result.value) {\n                this.props.dispatch({\n                    type: 'DELETE_CONTEST',\n                    payload: id\n                })\n                Swal.fire(\n                    'Deleted!',\n                    `The ${name} contest has been deleted.`,\n                    'success'\n                )\n            }\n        })\n    }\n\n    //Allows the link with the generated contest access code to be copied to the user's clipboard\n    copyLink = (code) => {\n        this.setState({ snackBarShowOpen: true });\n        let dummy = document.createElement(\"textarea\");\n        let currentUrl = window.location.href\n        let newUrl = '';\n        for (let each of currentUrl) {\n            if (each !== '#') {\n                newUrl += each\n            } else if (each == '#') {\n                break;\n            }\n        }\n        newUrl += '#/gamelaunch?contest='\n        newUrl += code\n        document.body.appendChild(dummy);\n        dummy.value = newUrl;\n        dummy.select();\n        document.execCommand(\"copy\");\n        document.body.removeChild(dummy);\n    }\n\n    //Allows users to close the \"copied link to clipboard\" snackbar\n    handleSnackShowClose = (event, reason) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n        this.setState({ snackBarShowOpen: false });\n    };\n\n    render() {\n\n        //Allows for classes when using Material-UI styling.\n        const { classes } = this.props\n\n        //Contest list variable, containing a loop to display all contests in the database to the DOM in a table format.\n        let contestList = this.props.contest.map(contest => {\n            return (\n                <tr>\n                    <td className={classes.cardContentIconsLeft}>\n                        <Button onClick={() => this.handleContestEditOpen(contest.contest_name, contest.start_date, contest.start_time, contest.end_date, contest.end_time, contest.compost, contest.id)}>\n                            <Edit />\n                        </Button>\n                    </td>\n                    <td className={classes.cardContentIcons}>\n                        <Button onClick={() => this.handleDelete(contest.contest_name, contest.id)}>\n                            <Delete />\n                        </Button>\n                    </td>\n                    <td className={classes.cardContentContest}>\n                        {contest.contest_name}\n                    </td>\n                    <td>\n                        <Button onClick={() => this.copyLink(contest.access_code)}>\n                            Copy Link<Link style={{ marginLeft: 3 }} />\n                        </Button>\n                    </td>\n                </tr>\n            )\n        })\n\n        let hourSelection = []\n\n        for (let i = 0; i < 24; i++) {\n            let hourFormat = {\n                displayValue: 0,\n                sqlValue: 0\n            }\n            hourFormat.sqlValue = i;\n            if (i == 0) {\n                hourFormat.displayValue = '12 am'\n                hourSelection.push(hourFormat);\n            } else if (i < 12) {\n                hourFormat.displayValue = i + ' am'\n                hourSelection.push(hourFormat);\n            } else if (i == 12) {\n                hourFormat.displayValue = '12 pm'\n                hourSelection.push(hourFormat)\n            } else if (i <= 23) {\n                let j = i;\n                hourFormat.displayValue = j - 12 + ' pm'\n                hourSelection.push(hourFormat);\n            }\n        }\n\n        return (\n            <div>\n                <Grid container spacing={4} justify=\"center\">\n                    <Grid item sm={3}>\n                    </Grid>\n                    <Grid item sm={6}>\n                        <Card className={classes.card}>\n                            <CardActions style={{ backgroundColor: \"#EEF1F1\" }}>\n                                <Grid item sm={5}>\n                                </Grid>\n                                <Grid item sm={2}>\n                                    <span className={classes.cardHeader} style={{ marginLeft: \"auto\" }}>Contests</span>\n                                </Grid>\n                                <Grid item sm={5} style={{ textAlign: \"right\" }}>\n                                    <Button onClick={() => this.handleContestAddOpen()} style={{ marginLeft: \"auto\", }}>\n                                        <AddCircle style={{ marginRight: 3 }} />Add New Contest\n                                    </Button>\n                                </Grid>\n                            </CardActions>\n                            <CardContent style={{ backgroundColor: \"#EEF1F1\" }}>\n                                {!this.props.contest[0] && <br />}\n                                {!this.props.contest[0] && <br />}\n                                {!this.props.contest[0] &&\n                                    <span className={classes.cardContent}>You have not added any contests.  Get started by clicking the <b>Add New Contest</b> button!</span>\n                                }\n                                {this.props.contest[0] && <table className={classes.tableContest}>\n                                    <thead>\n                                        <tr>\n                                            <th className={classes.edit}>Edit</th>\n                                            <th className={classes.delete}>Delete</th>\n                                            <th className={classes.contestName}>Contest Name</th>\n                                            <th className={classes.contestLink}>Contest Link</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {contestList}\n                                    </tbody>\n                                </table>}\n                            </CardContent>\n                        </Card>\n                    </Grid>\n                    <Grid item sm={3}>\n                    </Grid>\n                </Grid>\n\n                <Modal\n                    aria-labelledby=\"edit contest\"\n                    aria-describedby=\"edit contest\"\n                    className={classes.modal}\n                    open={this.state.contestEditOpen}\n                    onClose={this.handleContestClose}\n                    closeAfterTransition\n                    BackdropComponent={Backdrop}\n                    BackdropProps={{\n                        timeout: 500,\n                    }}\n                >\n                    <CardContent className={classes.form} style={{ backgroundColor: \"#EEF1F1\" }}>\n                        \n                        <form onSubmit={this.handleEdit}>\n                            <div>\n                                <TextField\n                                    align=\"left\"\n                                    id=\"outlined-name\"\n                                    label=\"contest name\"\n                                    className={classes.fieldLarge}\n                                    value={this.state.contestName}\n                                    onChange={this.handleChangeFor('contestName')}\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                    InputProps={{\n                                        className: classes.input,\n                                        classes: {\n                                            root: classes.cssOutlinedInput,\n                                            focused: classes.cssFocused,\n                                            notchedOutline: classes.notchedOutline,\n                                        }\n                                    }}\n                                    InputLabelProps={{\n                                        className: classes.input,\n                                        shrink: true\n                                    }}\n                                />\n                            </div>\n                            <div>\n                                <TextField\n                                    type=\"date\"\n                                    align=\"left\"\n                                    id=\"outlined-name\"\n                                    label=\"contest start date\"\n                                    className={classes.fieldMedium}\n                                    value={this.state.contestStartDate}\n                                    onChange={this.handleChangeFor('contestStartDate')}\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                    InputProps={{\n                                        className: classes.input,\n                                        classes: {\n                                            root: classes.cssOutlinedInput,\n                                            focused: classes.cssFocused,\n                                            notchedOutline: classes.notchedOutline,\n                                        }\n                                    }}\n                                    InputLabelProps={{\n                                        className: classes.input,\n                                        shrink: true\n                                    }}\n                                />\n                                <TextField\n                                    align=\"left\"\n                                    id=\"outlined-name\"\n                                    select\n                                    label=\"contest start time\"\n                                    className={classes.fieldMedium}\n                                    value={this.state.contestStartTime}\n                                    onChange={this.handleChangeFor('contestStartTime')}\n                                    SelectProps={{\n                                        MenuProps: {\n                                            className: classes.status,\n                                        },\n                                    }}\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                    InputProps={{\n                                        className: classes.input,\n                                        classes: {\n                                            root: classes.cssOutlinedInput,\n                                            focused: classes.cssFocused,\n                                            notchedOutline: classes.notchedOutline,\n                                        }\n                                    }}\n                                    InputLabelProps={{\n                                        className: classes.input,\n                                        shrink: true\n                                    }}\n                                >\n                                    {hourSelection.map((hour) =>\n                                        <MenuItem key={hour.sqlValue} value={hour.sqlValue} className={classes.timeOptions}>\n                                            {hour.displayValue}\n                                        </MenuItem>\n                                    )}\n                                </TextField>\n                            </div>\n                            <div>\n                                <TextField\n                                    type=\"date\"\n                                    align=\"left\"\n                                    id=\"outlined-name\"\n                                    label=\"contest end date\"\n                                    className={classes.fieldMedium}\n                                    value={this.state.contestEndDate}\n                                    onChange={this.handleChangeFor('contestEndDate')}\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                    InputProps={{\n                                        className: classes.input,\n                                        classes: {\n                                            root: classes.cssOutlinedInput,\n                                            focused: classes.cssFocused,\n                                            notchedOutline: classes.notchedOutline,\n                                        }\n                                    }}\n                                    InputLabelProps={{\n                                        className: classes.input,\n                                        shrink: true\n                                    }}\n                                />\n                                <TextField\n                                    align=\"left\"\n                                    id=\"outlined-name\"\n                                    select\n                                    label=\"contest end time\"\n                                    className={classes.fieldMedium}\n                                    value={this.state.contestEndTime}\n                                    onChange={this.handleChangeFor('contestEndTime')}\n                                    SelectProps={{\n                                        MenuProps: {\n                                            className: classes.status,\n                                        },\n                                    }}\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                    InputProps={{\n                                        className: classes.input,\n                                        classes: {\n                                            root: classes.cssOutlinedInput,\n                                            focused: classes.cssFocused,\n                                            notchedOutline: classes.notchedOutline,\n                                        }\n                                    }}\n                                    InputLabelProps={{\n                                        className: classes.input,\n                                        shrink: true\n                                    }}\n                                >\n                                    {hourSelection.map((hour) =>\n                                        <MenuItem key={hour.sqlValue} value={hour.sqlValue} className={classes.timeOptions}>\n                                            {hour.displayValue}\n                                        </MenuItem>\n                                    )}\n                                </TextField>\n                            </div>\n                            <div>\n                                <br />\n                                <FormControl component=\"fieldset\" className={classes.radio}>\n                                    <FormLabel component=\"legend\" style={{ color: \"black\" }}>Should your game include an option for a compost bin?</FormLabel>\n                                    <RadioGroup aria-label=\"compost bin\" name=\"compostBin\" defaultValue={this.state.contestCompostBin} onChange={this.handleChangeFor('contestCompostBin')}>\n                                        <FormControlLabel value=\"true\" control={<Radio />} label=\"Yes\" />\n                                        <FormControlLabel value=\"false\" control={<Radio />} label=\"No\" />\n                                    </RadioGroup>\n                                </FormControl>\n                            </div>\n                            <div>\n                                <Button\n                                    variant=\"contained\"\n                                    name=\"cancel\"\n                                    color=\"secondary\"\n                                    onClick={() => this.handleContestClose()}\n                                    style={{ marginTop: 10, marginRight: 10 }}>\n                                    <Cancel style={{ marginRight: 3 }} />Cancel\n                                </Button>\n                                <Button\n                                    variant=\"contained\"\n                                    type=\"submit\"\n                                    name=\"submit\"\n                                    color=\"primary\"\n                                    style={{ marginTop: 10 }}>\n                                    <Save style={{ marginRight: 3 }} />Save\n                         </Button>\n                            </div>\n                        </form>\n\n                    </CardContent>\n                </Modal>\n\n                <Modal\n                    aria-labelledby=\"add contest\"\n                    aria-describedby=\"add contest\"\n                    className={classes.modal}\n                    open={this.state.contestAddOpen}\n                    onClose={this.handleContestClose}\n                    closeAfterTransition\n                    BackdropComponent={Backdrop}\n                    BackdropProps={{\n                        timeout: 500,\n                    }}\n                >\n                    <CardContent className={classes.form} style={{ backgroundColor: \"#EEF1F1\" }}>\n\n                        <form onSubmit={this.handleAdd}>\n                            <div>\n                                <TextField\n                                    align=\"left\"\n                                    id=\"outlined-name\"\n                                    label=\"contest name\"\n                                    className={classes.fieldLarge}\n                                    value={this.state.contestName}\n                                    onChange={this.handleChangeFor('contestName')}\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                    InputProps={{\n                                        className: classes.input,\n                                        classes: {\n                                            root: classes.cssOutlinedInput,\n                                            focused: classes.cssFocused,\n                                            notchedOutline: classes.notchedOutline,\n                                        }\n                                    }}\n                                    InputLabelProps={{\n                                        className: classes.input,\n                                        shrink: true\n                                    }}\n                                />\n                            </div>\n                            <div>\n                                <TextField\n                                    type=\"date\"\n                                    align=\"left\"\n                                    id=\"outlined-name\"\n                                    label=\"contest start date\"\n                                    className={classes.fieldMedium}\n                                    value={this.state.contestStartDate}\n                                    onChange={this.handleChangeFor('contestStartDate')}\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                    InputProps={{\n                                        className: classes.input,\n                                        classes: {\n                                            root: classes.cssOutlinedInput,\n                                            focused: classes.cssFocused,\n                                            notchedOutline: classes.notchedOutline,\n                                        }\n                                    }}\n                                    InputLabelProps={{\n                                        className: classes.input,\n                                        shrink: true\n                                    }}\n                                />\n                                <TextField\n                                    align=\"left\"\n                                    id=\"outlined-name\"\n                                    select\n                                    label=\"contest start time\"\n                                    className={classes.fieldMedium}\n                                    value={this.state.contestStartTime}\n                                    onChange={this.handleChangeFor('contestStartTime')}\n                                    SelectProps={{\n                                        MenuProps: {\n                                            className: classes.status,\n                                        },\n                                    }}\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                    InputProps={{\n                                        className: classes.input,\n                                        classes: {\n                                            root: classes.cssOutlinedInput,\n                                            focused: classes.cssFocused,\n                                            notchedOutline: classes.notchedOutline,\n                                        }\n                                    }}\n                                    InputLabelProps={{\n                                        className: classes.input,\n                                        shrink: true\n                                    }}\n                                >\n                                    {hourSelection.map((hour) =>\n                                        <MenuItem key={hour.sqlValue} value={hour.sqlValue} className={classes.timeOptions}>\n                                            {hour.displayValue}\n                                        </MenuItem>\n                                    )}\n                                </TextField>\n                            </div>\n                            <div>\n                                <TextField\n                                    type=\"date\"\n                                    align=\"left\"\n                                    id=\"outlined-name\"\n                                    label=\"contest end date\"\n                                    className={classes.fieldMedium}\n                                    value={this.state.contestEndDate}\n                                    onChange={this.handleChangeFor('contestEndDate')}\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                    InputProps={{\n                                        className: classes.input,\n                                        classes: {\n                                            root: classes.cssOutlinedInput,\n                                            focused: classes.cssFocused,\n                                            notchedOutline: classes.notchedOutline,\n                                        }\n                                    }}\n                                    InputLabelProps={{\n                                        className: classes.input,\n                                        shrink: true\n                                    }}\n                                />\n                                <TextField\n                                    align=\"left\"\n                                    id=\"outlined-name\"\n                                    select\n                                    label=\"contest end time\"\n                                    className={classes.fieldMedium}\n                                    value={this.state.contestEndTime}\n                                    onChange={this.handleChangeFor('contestEndTime')}\n                                    SelectProps={{\n                                        MenuProps: {\n                                            className: classes.status,\n                                        },\n                                    }}\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                    InputProps={{\n                                        className: classes.input,\n                                        classes: {\n                                            root: classes.cssOutlinedInput,\n                                            focused: classes.cssFocused,\n                                            notchedOutline: classes.notchedOutline,\n                                        }\n                                    }}\n                                    InputLabelProps={{\n                                        className: classes.input,\n                                        shrink: true\n                                    }}\n                                >\n                                    {hourSelection.map((hour) =>\n                                        <MenuItem key={hour.sqlValue} value={hour.sqlValue} className={classes.timeOptions}>\n                                            {hour.displayValue}\n                                        </MenuItem>\n                                    )}\n                                </TextField>\n                            </div>\n                            <div>\n                                <br />\n                                <FormControl component=\"fieldset\" className={classes.radio}>\n                                    <FormLabel component=\"legend\" style={{ color: \"black\" }}>Should your game include an option for a compost bin?</FormLabel>\n                                    <RadioGroup aria-label=\"compost bin\" name=\"compostBin\" onChange={this.handleChangeFor('contestCompostBin')}>\n                                        <FormControlLabel value=\"true\" control={<Radio />} label=\"Yes\" />\n                                        <FormControlLabel value=\"false\" control={<Radio />} label=\"No\" />\n                                    </RadioGroup>\n                                </FormControl>\n                            </div>\n                            <div>\n                                <Button\n                                    variant=\"contained\"\n                                    name=\"cancel\"\n                                    color=\"secondary\"\n                                    onClick={() => this.handleContestClose()}\n                                    style={{ marginTop: 10, marginRight: 10 }}>\n                                    <Cancel style={{ marginRight: 3 }} />Cancel\n                                </Button>\n                                <Button\n                                    variant=\"contained\"\n                                    type=\"submit\"\n                                    name=\"submit\"\n                                    color=\"primary\"\n                                    style={{ marginTop: 10 }}>\n                                    <Save style={{ marginRight: 3 }} />Save\n                         </Button>\n                            </div>\n                        </form>\n\n                    </CardContent>\n                </Modal>\n\n                <Snackbar\n                    anchorOrigin={{\n                        vertical: \"bottom\",\n                        horizontal: \"right\"\n                    }}\n                    open={this.state.snackBarShowOpen}\n                    autoHideDuration={6000}\n                    onClose={this.handleSnackShowClose}\n                    ContentProps={{\n                        \"aria-describedby\": \"message-id\"\n                    }}\n                    message={<span id='message-id'>Copied link to clipboard!</span>}\n                    action={[\n                        <IconButton\n                            key='close'\n                            aria-label='Close'\n                            color='inherit'\n                            className={classes.close}\n                            onClick={this.handleSnackShowClose}>\n                            <Close />\n                        </IconButton>\n                    ]}\n                />\n\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (reduxStore) => {\n    return {\n        user: reduxStore.user,\n        team: reduxStore.teamSettings,\n        organization: reduxStore.orgSettings,\n        contest: reduxStore.contestSettings\n    }\n}\nexport default connect(mapStateToProps)(withStyles(styles)(Contests));","//Imports (React, Material-UI, Redux, Router, and components for Organization, Teams, and Contests)\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { Settings } from '@material-ui/icons';\nimport OrganizationName from './SettingsComponents/OrganizationName';\nimport Teams from './SettingsComponents/Teams';\nimport Contests from './SettingsComponents/Contests';\nimport { Redirect } from 'react-router-dom';\n\n//Styles for Material-UI Components\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  card: {\n    textAlign: 'center',\n    background: '#fff',\n    color: 'black',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  cardHeader: {\n    fontSize: 28,\n    fontWeight: 'bold'\n  },\n  cardContent: {\n    fontSize: 24\n  },\n  h1: {\n    textAlign: 'right'\n  },\n  icon: {\n    width: 35,\n    height: 35,\n    marginLeft: 10,\n    marginBottom: -8,\n  },\n});\n\nclass SettingsOrganization extends Component {\n\n  state = {\n\n  }\n\n  render() {\n\n    //Allows for classes when using Material-UI styling.\n    const { classes } = this.props\n\n    return (\n      <>{this.props.user.wastewise_admin && <Redirect to=\"/settingsadmin\"/> }\n      <div className={classes.root}>\n        <h1 className={classes.h1}>Settings<Settings className={classes.icon} /></h1>\n          <OrganizationName/>\n          <br/><br/>\n          <Teams/>\n        <br /><br />\n          <Contests/>\n      </div>\n      </>\n    )\n\n  }\n\n}\n\nconst mapStateToProps = (reduxStore) => {\n  return {\n    user: reduxStore.user,\n  }\n}\nexport default connect(mapStateToProps)(withStyles(styles)(SettingsOrganization));","//Imports (React, Material-UI, Redux, SweetAlert)\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { Backdrop, Card, CardActions, CardContent, Fab, Grid, MenuItem, Modal, TextField } from \"@material-ui/core\";\nimport { Add, Edit, Cancel, Save, Delete, Remove } from '@material-ui/icons';\nimport { withStyles } from '@material-ui/styles';\nimport { connect } from 'react-redux';\nimport Swal from 'sweetalert2';\nimport withReactContent from 'sweetalert2-react-content';\n\n//Declaring SweetAlert for use later in this file\nconst MySwal = withReactContent(Swal)\n\n//Styles for Material-UI Components\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    card: {\n        textAlign: 'center',\n        background: '#fff',\n        color: 'black',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    cardHeader: {\n        fontSize: 20,\n        fontWeight: 'bold',\n    },\n    cardContent: {\n        fontSize: 14\n    },\n    cardContentLeft: {\n        fontSize: 20,\n        width: 10\n    },\n    cardContentIcons: {\n        fontSize: 20,\n        paddingLeft: 5,\n        paddingRight: 5\n    },\n    cardContentItems: {\n        fontSize: 20,\n        paddingLeft: 8,\n        textAlign: 'center'\n    },\n    image: {\n        height: 100,\n        width: 100\n    },\n    imageModal: {\n        height: \"20%\",\n        width: \"20%\",\n    },\n    icon: {\n        width: 35,\n        height: 35,\n        marginLeft: 10,\n        marginBottom: -8,\n    },\n    fieldMedium: {\n        margin: 5,\n        width: 240,\n        '&:hover:not($disabled):not($cssFocused):not($error) $notchedOutline': {\n            borderColor: \"black\"\n        }\n    },\n    fieldLarge: {\n        margin: 5,\n        width: 490,\n        '&:hover:not($disabled):not($cssFocused):not($error) $notchedOutline': {\n            borderColor: \"black\"\n        }\n    },\n    addItem: {\n        fontSize: 24,\n    },\n    edit: {\n        width: \"10%\"\n    },\n    delete: {\n        width: \"10%\"\n    },\n    itemName: {\n        width: \"40%\"\n    },\n    receptacle: {\n        width: \"20%\"\n    },\n    upload: {\n        marginLeft: 10\n    },\n    pleaseWait: {\n        color: \"red\",\n        fontWeight: \"bold\"\n    },\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    form: {\n        backgroundColor: '#fff',\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n        color: theme.palette.secondary.main,\n        textAlign: 'center'\n    },\n    input: {\n        color: \"black\"\n    },\n    cssLabel: {\n        '&$cssFocused': {\n            color: \"black\",\n        },\n    },\n    cssOutlinedInput: {\n        '&$cssFocused $notchedOutline': {\n            borderColor: \"black\",\n        },\n    },\n    cssFocused: {},\n    notchedOutline: { borderColor: \"black\" }\n});\n\nclass Items extends Component {\n\n    state = {\n        toggleAdd: false,\n        itemName: '',\n        receptacle: '',\n        url: '',\n        itemText: '',\n        itemId: 0,\n        selectedFile: null,\n        attachment_url: '',\n        file: null,\n        pleaseWait: false\n    }\n\n    //Load items to the DOM\n    componentDidMount() {\n        this.getItems();\n    }\n\n    //When an image is detected in props, load these images\n    componentDidUpdate(prevProps) {\n        if (this.props.image !== prevProps.image) {\n            this.setState({\n                url: this.props.image,\n                pleaseWait: false\n            })\n        }\n    }\n\n    //Function to get the items, included in componentDidMount\n    getItems() {\n        this.props.dispatch({\n            type: 'FETCH_ITEMS'\n        })\n    }\n    \n    //Toggles display of form for a new item\n    handleAddClick = () => {\n        this.setState({\n            toggleAdd: !this.state.toggleAdd\n        })\n    }\n\n    //Saves any changes to form fields to state as users make edits\n    handleChangeFor = (propertyName) => (event) => {\n        this.setState({\n            [propertyName]: event.target.value\n        });\n    }\n\n    //Initializes item fields with its saved values upon edit\n    handleItemEditOpen = (name, receptacle, text, url, id) => {\n        this.setState({\n            itemEditOpen: !this.state.itemEditOpen,\n            itemName: name,\n            receptacle: receptacle,\n            itemText: text,\n            url: url,\n            itemId: id\n        })\n    };\n\n    //Posts a new item to the database\n    handleItemAdd = () => {\n        this.props.dispatch({\n            type: 'ADD_ITEM',\n            payload: this.state\n\n        })\n        this.setState({\n            itemName: '',\n            receptacle: '',\n            url: '',\n            itemText: '',\n            file: ''\n        })\n    }\n\n    //Deletes an item from the database.  Uses a SweetAlert, so user must confirm the change.\n    handleDelete = (name, id) => {\n        MySwal.fire({\n            title: `Delete the ${name} item?`,\n            text: `This will remove ${name} from the game.`,\n            type: 'error',\n            showCancelButton: true,\n            confirmButtonColor: '#3085d6',\n            cancelButtonColor: '#d33',\n            confirmButtonText: 'Delete'\n        }).then((result) => {\n            if (result.value) {\n                this.props.dispatch({\n                    type: 'DELETE_ITEM',\n                    payload: id\n                })\n                Swal.fire(\n                    'Deleted!',\n                    `The item ${name} has been deleted.`,\n                    'success'\n                )\n            }\n        })\n    }\n\n    //Grabs the image file information upon selecting an image file\n    handleUploadInputChange = e => {\n        this.setState({ file: e.target.files[0] });\n    };\n\n    //Posts the image to Amazon Web Services S3 storage and retrieves the image URL.\n    handleUpload = event => {\n        event.preventDefault();\n\n         this.props.dispatch({\n            type: 'ADD_ITEM_IMAGE',\n            payload: this.state\n        });\n\n        this.setState({\n            pleaseWait: !this.state.pleaseWait\n        })\n    };\n\n    //Handes PUT request to change then information about an item.\n    handleEdit = (event) => {\n        event.preventDefault();\n        this.props.dispatch({\n            type: 'UPDATE_ITEM',\n            payload: this.state\n        })\n        this.handleItemClose();\n    }\n\n    //Allows a user to cancel an item change.\n    handleItemClose = () => {\n        this.setState({\n            itemEditOpen: false,\n            itemName: '',\n            itemReceptacle: '',\n            itemUrl: '',\n            itemText: '',\n        })\n    };\n\n    render() {\n\n        //Allows for classes when using Material-UI styling.\n        const { classes } = this.props\n\n        //Item list variable, containing a loop to display all items in the database to the DOM in a table format.\n        let itemList = this.props.item.map(item => {\n            return (\n                <tr>\n                    <td className={classes.cardContentIconsLeft}>\n                        <Button onClick={() => this.handleItemEditOpen(item.name, item.receptacle, item.item_text, item.url, item.id)}>\n                            <Edit />\n                        </Button>\n                    </td>\n                    <td className={classes.cardContentIcons}>\n                        <Button onClick={() => this.handleDelete(item.name, item.id)}>\n                            <Delete />\n                        </Button>\n                    </td>\n                    <td className={classes.cardContentItems}>\n                        {item.name}\n                    </td>\n                    <td className={classes.cardContentItems}>\n                        {item.receptacle}\n                    </td>\n                    <td className={classes.cardContentItems}>\n                        <img className={classes.image} src={item.url} />\n                    </td>\n                </tr>\n            )\n        })\n\n        return (\n\n            <div>\n                <span className={classes.addItem}>Add Item</span>\n                <br />\n                {!this.state.toggleAdd ? <Fab color=\"primary\" aria-label=\"add\" style={{ marginTop: 15 }} onClick={this.handleAddClick}>\n                    <Add />\n                </Fab> :\n                    <Fab color=\"secondary\" aria-label=\"remove\" style={{ marginTop: 15 }} onClick={this.handleAddClick}>\n                        <Remove />\n                    </Fab>\n                }\n                <br /><br />\n                {this.state.toggleAdd && <div>\n                    <TextField\n                        align=\"left\"\n                        id=\"outlined-name\"\n                        label=\"item name\"\n                        className={classes.fieldMedium}\n                        value={this.state.itemName}\n                        onChange={this.handleChangeFor('itemName')}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        InputProps={{\n                            className: classes.input,\n                            classes: {\n                                root: classes.cssOutlinedInput,\n                                focused: classes.cssFocused,\n                                notchedOutline: classes.notchedOutline,\n                            }\n                        }}\n                        InputLabelProps={{\n                            className: classes.input,\n                            shrink: true\n                        }}\n                    />\n                    <TextField\n                        align=\"left\"\n                        id=\"outlined-name\"\n                        select\n                        label=\"receptacle\"\n                        className={classes.fieldMedium}\n                        value={this.state.receptacle}\n                        onChange={this.handleChangeFor('receptacle')}\n                        SelectProps={{\n                            MenuProps: {\n                                className: classes.status,\n                            },\n                        }}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        InputProps={{\n                            className: classes.input,\n                            classes: {\n                                root: classes.cssOutlinedInput,\n                                focused: classes.cssFocused,\n                                notchedOutline: classes.notchedOutline,\n                            }\n                        }}\n                        InputLabelProps={{\n                            className: classes.input,\n                            shrink: true\n                        }}\n                    >\n                        <MenuItem value=\"garbage\">\n                            Garbage\n                        </MenuItem>\n                        <MenuItem value=\"recycle\">\n                            Recycling\n                        </MenuItem>\n                        <MenuItem value=\"compost\">\n                            Compost\n                        </MenuItem>\n                    </TextField>\n                    <br />\n                    <TextField\n                        align=\"left\"\n                        id=\"outlined-name\"\n                        label=\"reason for receptacle\"\n                        className={classes.fieldLarge}\n                        value={this.state.itemText}\n                        onChange={this.handleChangeFor('itemText')}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        InputProps={{\n                            className: classes.input,\n                            classes: {\n                                root: classes.cssOutlinedInput,\n                                focused: classes.cssFocused,\n                                notchedOutline: classes.notchedOutline,\n                            }\n                        }}\n                        InputLabelProps={{\n                            className: classes.input,\n                            shrink: true\n                        }}\n                    />\n                    <br/><br/>\n                    <TextField\n                        type='file'\n                        onChange={this.handleUploadInputChange}\n                        />\n                    <Button className={classes.upload} variant='contained' color='secondary' onClick={this.handleUpload}>\n                        Upload\n\t\t\t\t\t</Button>\n                    {this.state.pleaseWait && <br/>}\n                    {this.state.pleaseWait && <span className={classes.pleaseWait}>Please wait...</span>}\n                    <br/><br/>\n                    <TextField\n                        align=\"left\"\n                        id=\"outlined-name\"\n                        label=\"image url\"\n                        className={classes.fieldLarge}\n                        value={this.state.url}\n                        onChange={this.handleChangeFor('url')}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        InputProps={{\n                            className: classes.input,\n                            classes: {\n                                root: classes.cssOutlinedInput,\n                                focused: classes.cssFocused,\n                                notchedOutline: classes.notchedOutline,\n                            }\n                        }}\n                        InputLabelProps={{\n                            className: classes.input,\n                            shrink: true\n                        }}\n                    />\n                    {/* <ImageUpload/> */}\n                    <br /><br />\n                    <Button className={classes.button} onClick={() => this.handleItemAdd()}\n                        variant=\"contained\" name=\"items\" color=\"primary\">Submit Item</Button>\n                </div>}\n\n                <br /><br />\n                <Grid container spacing={4} justify=\"center\">\n                    <Grid item sm={2}>\n                    </Grid>\n                    <Grid item sm={8}>\n                        <Card className={classes.card}>\n                            <CardActions style={{ backgroundColor: \"#EEF1F1\" }}>\n                                <Grid item sm={5}>\n                                </Grid>\n                                <Grid item sm={2}>\n                                    <span className={classes.cardHeader} style={{ marginLeft: \"auto\" }}>Items</span>\n                                </Grid>\n                                <Grid item sm={5} style={{ textAlign: \"right\" }}>\n                                </Grid>\n                            </CardActions>\n                            <CardContent style={{ backgroundColor: \"#EEF1F1\" }}>\n                                {this.props.item[0] && <table className={classes.tableItem}>\n                                    <thead>\n                                        <tr>\n                                            <th className={classes.edit}>Edit</th>\n                                            <th className={classes.delete}>Delete</th>\n                                            <th className={classes.itemName}>Item Name</th>\n                                            <th className={classes.receptacle}>Receptacle</th>\n                                            <th className={classes.image}>Image</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {itemList}\n                                    </tbody>\n                                </table>}\n                            </CardContent>\n                        </Card>\n                    </Grid>\n                    <Grid item sm={2}>\n                    </Grid>\n                </Grid>\n\n                <Modal\n                    aria-labelledby=\"edit item\"\n                    aria-describedby=\"edit item\"\n                    className={classes.modal}\n                    open={this.state.itemEditOpen}\n                    onClose={this.handleContestClose}\n                    closeAfterTransition\n                    BackdropComponent={Backdrop}\n                    BackdropProps={{\n                        timeout: 500,\n                    }}\n                >\n                    <CardContent className={classes.form} style={{ backgroundColor: \"#EEF1F1\" }}>\n\n                        {/* <h1 className={classes.h1} style={{ color: this.props.user.color }}>Enter Contest Details</h1> */}\n                        <form onSubmit={this.handleEdit}>\n                            <div>\n                                <img className={classes.imageModal} src={this.state.url}/>\n                                <br/><br/>\n                            </div>\n                            <div>\n                                <TextField\n                                    align=\"left\"\n                                    id=\"outlined-name\"\n                                    label=\"item name\"\n                                    className={classes.fieldMedium}\n                                    value={this.state.itemName}\n                                    onChange={this.handleChangeFor('itemName')}\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                    InputProps={{\n                                        className: classes.input,\n                                        classes: {\n                                            root: classes.cssOutlinedInput,\n                                            focused: classes.cssFocused,\n                                            notchedOutline: classes.notchedOutline,\n                                        }\n                                    }}\n                                    InputLabelProps={{\n                                        className: classes.input,\n                                        shrink: true\n                                    }}\n                                />\n                                <TextField\n                                    align=\"left\"\n                                    id=\"outlined-name\"\n                                    select\n                                    label=\"receptacle\"\n                                    className={classes.fieldMedium}\n                                    value={this.state.receptacle}\n                                    onChange={this.handleChangeFor('receptacle')}\n                                    SelectProps={{\n                                        MenuProps: {\n                                            className: classes.status,\n                                        },\n                                    }}\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                    InputProps={{\n                                        className: classes.input,\n                                        classes: {\n                                            root: classes.cssOutlinedInput,\n                                            focused: classes.cssFocused,\n                                            notchedOutline: classes.notchedOutline,\n                                        }\n                                    }}\n                                    InputLabelProps={{\n                                        className: classes.input,\n                                        shrink: true\n                                    }}\n                                >\n                                    <MenuItem value=\"garbage\">\n                                        Garbage\n                                    </MenuItem>\n                                    <MenuItem value=\"recycle\">\n                                        Recycling\n                                    </MenuItem>\n                                    <MenuItem value=\"compost\">\n                                        Compost\n                                    </MenuItem>\n                                </TextField>\n                            </div>\n                            <div>\n                                <TextField\n                                    align=\"left\"\n                                    id=\"outlined-name\"\n                                    label=\"reason for receptacle\"\n                                    className={classes.fieldLarge}\n                                    value={this.state.itemText}\n                                    onChange={this.handleChangeFor('itemText')}\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                    InputProps={{\n                                        className: classes.input,\n                                        classes: {\n                                            root: classes.cssOutlinedInput,\n                                            focused: classes.cssFocused,\n                                            notchedOutline: classes.notchedOutline,\n                                        }\n                                    }}\n                                    InputLabelProps={{\n                                        className: classes.input,\n                                        shrink: true\n                                    }}\n                                />\n                            </div>\n                            <div>\n                                <Button\n                                    variant=\"contained\"\n                                    name=\"cancel\"\n                                    color=\"secondary\"\n                                    onClick={() => this.handleItemClose()}\n                                    style={{ marginTop: 10, marginRight: 10 }}>\n                                    <Cancel style={{ marginRight: 3 }} />Cancel\n                                </Button>\n                                <Button\n                                    variant=\"contained\"\n                                    type=\"submit\"\n                                    name=\"submit\"\n                                    color=\"primary\"\n                                    style={{ marginTop: 10 }}>\n                                    <Save style={{ marginRight: 3 }} />Save\n                         </Button>\n                            </div>\n                        </form>\n\n                    </CardContent>\n                </Modal>\n            </div>\n        )\n\n    }\n\n}\n\nconst mapStateToProps = (reduxStore) => {\n    return {\n        user: reduxStore.user,\n        team: reduxStore.teamSettings,\n        organization: reduxStore.orgSettings,\n        item: reduxStore.item,\n        image: reduxStore.imageUrlReducer\n    }\n}\nexport default connect(mapStateToProps)(withStyles(styles)(Items));","//Imports (React, Material-UI, Redux, SweetAlert)\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { Backdrop, Card, CardActions, CardContent, Fab, Grid, Modal, TextField } from \"@material-ui/core\";\nimport { Add, Edit, Cancel, Save, Delete, Remove } from '@material-ui/icons';\nimport { withStyles } from '@material-ui/styles';\nimport { connect } from 'react-redux';\nimport Swal from 'sweetalert2';\nimport withReactContent from 'sweetalert2-react-content';\n\n//Declaring SweetAlert for use later in this file\nconst MySwal = withReactContent(Swal)\n\n//Styles for Material-UI Components\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    card: {\n        textAlign: 'center',\n        background: '#fff',\n        color: 'black',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    cardHeader: {\n        fontSize: 20,\n        fontWeight: 'bold',\n    },\n    cardContent: {\n        fontSize: 14\n    },\n    cardContentLeft: {\n        fontSize: 20,\n        width: 10\n    },\n    cardContentIcons: {\n        fontSize: 20,\n        paddingLeft: 5,\n        paddingRight: 5\n    },\n    cardContentUsers: {\n        fontSize: 20,\n        paddingLeft: 8,\n        textAlign: 'center'\n    },\n    icon: {\n        width: 35,\n        height: 35,\n        marginLeft: 10,\n        marginBottom: -8,\n    },\n    fieldMedium: {\n        margin: 5,\n        width: 240,\n        '&:hover:not($disabled):not($cssFocused):not($error) $notchedOutline': {\n            borderColor: \"black\"\n        }\n    },\n    fieldLarge: {\n        margin: 5,\n        width: 490,\n        '&:hover:not($disabled):not($cssFocused):not($error) $notchedOutline': {\n            borderColor: \"black\"\n        }\n    },\n    edit: {\n        width: \"10%\"\n    },\n    delete: {\n        width: \"10%\"\n    },\n    firstName: {\n        width: \"20%\"\n    },\n    lastName: {\n        width: \"20%\"\n    },\n    email: {\n        width: \"40%\"\n    },\n    addItem: {\n        fontSize: 24,\n    },\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    form: {\n        backgroundColor: '#fff',\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n        color: theme.palette.secondary.main,\n        textAlign: 'center'\n    },\n    input: {\n        color: \"black\"\n    },\n    cssLabel: {\n        '&$cssFocused': {\n            color: \"black\",\n        },\n    },\n    cssOutlinedInput: {\n        '&$cssFocused $notchedOutline': {\n            borderColor: \"black\",\n        },\n    },\n    cssFocused: {},\n    notchedOutline: { borderColor: \"black\" }\n});\n\nclass Users extends Component {\n\n    state = {\n        toggleAdd: false,\n        userEditOpen: false,\n        firstName: '',\n        lastName: '',\n        username: '',\n        password: '',\n        confirmPassword: '',\n        userId: 0\n    }\n\n    //Load users to the DOM\n    componentDidMount() {\n        this.getUsers();\n    }\n\n    //Function to retrieve users from the database\n    getUsers() {\n        this.props.dispatch({\n            type: 'FETCH_WASTE_WISE_USERS'\n        })\n    }\n\n    //Indicates whether the fields for the add user form should display\n    handleAddClick = () => {\n        this.setState({\n            toggleAdd: !this.state.toggleAdd\n        })\n    }\n\n    //Saves any changes to form fields to state as users make edits\n    handleChangeFor = (propertyName) => (event) => {\n        this.setState({\n            [propertyName]: event.target.value\n        });\n    }\n\n    //Validation to ensure all required user fields are entered by the user\n    addFieldValidation() {\n\n        if (!this.state.firstName) {\n            alert('Please enter a value for First Name.')\n            return false;\n        }\n        if (!this.state.lastName) {\n            alert('Please enter a value for Last Name.')\n            return false;\n        }\n        if (!this.state.username) {\n            alert('Please enter a value for Email Address.')\n            return false;\n        }\n        if (!this.state.password) {\n            alert('Please enter a value for Password.')\n            return false;\n        }\n        if (!this.state.confirmPassword) {\n            alert('Please enter a value for Confirm Password.')\n            return false;\n        }\n        if (this.state.password.length < 8) {\n            alert('Please ensure your password is at least eight characters.');\n            return false;\n        }\n        if (this.state.password !== this.state.confirmPassword) {\n            alert('The passwords do not match.  Please try again.');\n            return false;\n        }\n\n        this.handleUserAdd();\n    }\n\n    //Validation to require all fields are filled out when editing a user\n    editFieldValidation = (event) => {\n\n        event.preventDefault();\n\n        if (!this.state.firstName) {\n            alert('Please enter a value for First Name.')\n            return false;\n        }\n        if (!this.state.lastName) {\n            alert('Please enter a value for Last Name.')\n            return false;\n        }\n        if (!this.state.username) {\n            alert('Please enter a value for Email Address.')\n            return false;\n        }\n        if (!this.state.password) {\n            this.handleEditWithoutPassword();\n            return true;\n        }\n        if (this.state.password.length < 8) {\n            alert('Please ensure your password is at least eight characters.');\n            return false;\n        }\n        if (this.state.password !== this.state.confirmPassword) {\n            alert('The passwords do not match.  Please try again.');\n            return false;\n        }\n\n        this.handleEdit();\n\n    }\n\n    //Handles save of a new users and sends a POST request to the database\n    handleUserAdd() {\n        this.props.dispatch({\n            type: 'ADD_WASTE_WISE_USER',\n            payload: this.state\n\n        })\n        this.setState({\n            firstName: '',\n            lastName: '',\n            username: '',\n            password: '',\n            confirmPassword: '',\n        })\n    }\n\n    //Handles delete of a user from the database.  SweetAlert triggers first to verify the selection being made.\n    handleDelete = (name, id) => {\n        MySwal.fire({\n            title: `Delete ${name} as a Waste Wise user?`,\n            text: `This will remove ${name} as an administrative user.`,\n            type: 'error',\n            showCancelButton: true,\n            confirmButtonColor: '#3085d6',\n            cancelButtonColor: '#d33',\n            confirmButtonText: 'Delete'\n        }).then((result) => {\n            if (result.value) {\n                this.props.dispatch({\n                    type: 'DELETE_USER',\n                    payload: id\n                })\n                Swal.fire(\n                    'Deleted!',\n                    `${name} has been removed as a Waste Waste user.`,\n                    'success'\n                )\n            }\n        })\n    }\n\n    //Handles PUT (edit) request of user and dispatches to the database.\n    handleEdit() {\n        this.props.dispatch({\n            type: 'UPDATE_USER',\n            payload: this.state\n        })\n        this.handleUserClose();\n    }\n\n    //Ensures user is editing without resetting their password, if no password change was provided during edit process.\n    handleEditWithoutPassword() {\n        this.props.dispatch({\n            type: 'UPDATE_USER_WITHOUT_PASSWORD',\n            payload: this.state\n        })\n        this.handleUserClose();\n    }\n\n    //Ensure's a user's information defaults correctly upon edit.\n    handleUserEditOpen = (userId, firstName, lastName, username) => {\n        this.setState({\n            userEditOpen: !this.state.userEditOpen,\n            firstName: firstName,\n            lastName: lastName,\n            username: username,\n            password: '',\n            confirmPassword: '',\n            userId: userId\n        })\n    };\n\n    //Allows user to cancel the edit of a user.\n    handleUserClose = () => {\n        this.setState({\n            userEditOpen: false,\n            firstName: '',\n            lastName: '',\n            username: '',\n            password: '',\n            confirmPassword: '',\n            userId: 0\n        })\n    };\n\n    render() {\n\n        //Allows for classes when using Material-UI styling.\n        const { classes } = this.props\n\n        //User list variable, containing a loop to display all users in the database to the DOM in a table format.\n        let userList = this.props.admin.map(user => {\n            return (\n                <tr>\n                    <td className={classes.cardContentIconsLeft}>\n                        <Button onClick={() => this.handleUserEditOpen(user.id, user.first_name, user.last_name, user.username)}>\n                            <Edit />\n                        </Button>\n                    </td>\n                    <td className={classes.cardContentIcons}>\n                        <Button onClick={() => this.handleDelete(user.first_name, user.id)}>\n                            <Delete />\n                        </Button>\n                    </td>\n                    <td className={classes.cardContentItems}>\n                        {user.first_name}\n                    </td>\n                    <td className={classes.cardContentItems}>\n                        {user.last_name}\n                    </td>\n                    <td className={classes.cardContentItems}>\n                        {user.username}\n                    </td>\n                </tr>\n            )\n        })\n\n        return (\n            <div>\n                <span className={classes.addItem}>Add Waste Wise Admin User</span>\n                <br />\n                {!this.state.toggleAdd ? <Fab color=\"primary\" aria-label=\"add\" style={{ marginTop: 15 }} onClick={this.handleAddClick}>\n                    <Add />\n                </Fab> :\n                    <Fab color=\"secondary\" aria-label=\"remove\" style={{ marginTop: 15 }} onClick={this.handleAddClick}>\n                        <Remove />\n                    </Fab>\n                }\n                <br /> <br />\n                {this.state.toggleAdd && <div>\n                    <TextField\n                        align=\"left\"\n                        id=\"outlined-name\"\n                        label=\"first name\"\n                        className={classes.fieldMedium}\n                        value={this.state.firstName}\n                        onChange={this.handleChangeFor('firstName')}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        InputProps={{\n                            className: classes.input,\n                            classes: {\n                                root: classes.cssOutlinedInput,\n                                focused: classes.cssFocused,\n                                notchedOutline: classes.notchedOutline,\n                            }\n                        }}\n                        InputLabelProps={{\n                            className: classes.input,\n                            shrink: true\n                        }}\n                    />\n                    <TextField\n                        align=\"left\"\n                        id=\"outlined-name\"\n                        label=\"last name\"\n                        className={classes.fieldMedium}\n                        value={this.state.lastName}\n                        onChange={this.handleChangeFor('lastName')}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        InputProps={{\n                            className: classes.input,\n                            classes: {\n                                root: classes.cssOutlinedInput,\n                                focused: classes.cssFocused,\n                                notchedOutline: classes.notchedOutline,\n                            }\n                        }}\n                        InputLabelProps={{\n                            className: classes.input,\n                            shrink: true\n                        }}\n                    />\n                    <br />\n                    <TextField\n                        align=\"left\"\n                        id=\"outlined-name\"\n                        label=\"email address\"\n                        className={classes.fieldLarge}\n                        value={this.state.username}\n                        onChange={this.handleChangeFor('username')}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        InputProps={{\n                            className: classes.input,\n                            classes: {\n                                root: classes.cssOutlinedInput,\n                                focused: classes.cssFocused,\n                                notchedOutline: classes.notchedOutline,\n                            }\n                        }}\n                        InputLabelProps={{\n                            className: classes.input,\n                            shrink: true\n                        }}\n                    />\n                    <br />\n                    <TextField\n                        type=\"password\"\n                        align=\"left\"\n                        id=\"outlined-name\"\n                        label=\"password\"\n                        className={classes.fieldMedium}\n                        value={this.state.password}\n                        onChange={this.handleChangeFor('password')}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        InputProps={{\n                            className: classes.input,\n                            classes: {\n                                root: classes.cssOutlinedInput,\n                                focused: classes.cssFocused,\n                                notchedOutline: classes.notchedOutline,\n                            }\n                        }}\n                        InputLabelProps={{\n                            className: classes.input,\n                            shrink: true\n                        }}\n                    />\n                    <TextField\n                        type=\"password\"\n                        align=\"left\"\n                        id=\"outlined-name\"\n                        label=\"confirm password\"\n                        className={classes.fieldMedium}\n                        value={this.state.confirmPassword}\n                        onChange={this.handleChangeFor('confirmPassword')}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        InputProps={{\n                            className: classes.input,\n                            classes: {\n                                root: classes.cssOutlinedInput,\n                                focused: classes.cssFocused,\n                                notchedOutline: classes.notchedOutline,\n                            }\n                        }}\n                        InputLabelProps={{\n                            className: classes.input,\n                            shrink: true\n                        }}\n                    />\n                    <br /><br />\n                    <Button className={classes.button} onClick={() => this.addFieldValidation()}\n                        variant=\"contained\" name=\"items\" color=\"primary\">Submit User</Button>\n                </div>}\n                <br /><br />\n                <Grid container spacing={4} justify=\"center\">\n                    <Grid item sm={2}>\n                    </Grid>\n                    <Grid item sm={8}>\n                        <Card className={classes.card}>\n                            <CardActions style={{ backgroundColor: \"#EEF1F1\" }}>\n                                <Grid item sm={5}>\n                                </Grid>\n                                <Grid item sm={2}>\n                                    <span className={classes.cardHeader} style={{ marginLeft: \"auto\" }}>Users</span>\n                                </Grid>\n                                <Grid item sm={5} style={{ textAlign: \"right\" }}>\n                                </Grid>\n                            </CardActions>\n                            <CardContent style={{ backgroundColor: \"#EEF1F1\" }}>\n                                {this.props.item[0] && <table className={classes.tableItem}>\n                                    <thead>\n                                        <tr>\n                                            <th className={classes.edit}>Edit</th>\n                                            <th className={classes.delete}>Delete</th>\n                                            <th className={classes.firstName}>First Name</th>\n                                            <th className={classes.lastName}>Last Name</th>\n                                            <th className={classes.email}>Email</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {userList}\n                                    </tbody>\n                                </table>}\n                            </CardContent>\n                        </Card>\n                    </Grid>\n                    <Grid item sm={2}>\n                    </Grid>\n                </Grid>\n\n                <Modal\n                    aria-labelledby=\"edit user\"\n                    aria-describedby=\"edit user\"\n                    className={classes.modal}\n                    open={this.state.userEditOpen}\n                    onClose={this.handleUserClose}\n                    closeAfterTransition\n                    BackdropComponent={Backdrop}\n                    BackdropProps={{\n                        timeout: 500,\n                    }}\n                >\n                    <CardContent className={classes.form} style={{ backgroundColor: \"#EEF1F1\" }}>\n\n                        <form onSubmit={this.editFieldValidation}>\n                            <div>\n                                <TextField\n                                    align=\"left\"\n                                    id=\"outlined-name\"\n                                    label=\"first name\"\n                                    className={classes.fieldMedium}\n                                    value={this.state.firstName}\n                                    onChange={this.handleChangeFor('firstName')}\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                    InputProps={{\n                                        className: classes.input,\n                                        classes: {\n                                            root: classes.cssOutlinedInput,\n                                            focused: classes.cssFocused,\n                                            notchedOutline: classes.notchedOutline,\n                                        }\n                                    }}\n                                    InputLabelProps={{\n                                        className: classes.input,\n                                        shrink: true\n                                    }}\n                                />\n                                <TextField\n                                    align=\"left\"\n                                    id=\"outlined-name\"\n                                    label=\"last name\"\n                                    className={classes.fieldMedium}\n                                    value={this.state.lastName}\n                                    onChange={this.handleChangeFor('lastName')}\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                    InputProps={{\n                                        className: classes.input,\n                                        classes: {\n                                            root: classes.cssOutlinedInput,\n                                            focused: classes.cssFocused,\n                                            notchedOutline: classes.notchedOutline,\n                                        }\n                                    }}\n                                    InputLabelProps={{\n                                        className: classes.input,\n                                        shrink: true\n                                    }}\n                                />\n                                <br />\n                                <TextField\n                                    align=\"left\"\n                                    id=\"outlined-name\"\n                                    label=\"email address\"\n                                    className={classes.fieldLarge}\n                                    value={this.state.username}\n                                    onChange={this.handleChangeFor('username')}\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                    InputProps={{\n                                        className: classes.input,\n                                        classes: {\n                                            root: classes.cssOutlinedInput,\n                                            focused: classes.cssFocused,\n                                            notchedOutline: classes.notchedOutline,\n                                        }\n                                    }}\n                                    InputLabelProps={{\n                                        className: classes.input,\n                                        shrink: true\n                                    }}\n                                />\n                                <br />\n                                <TextField\n                                    type=\"password\"\n                                    align=\"left\"\n                                    id=\"outlined-name\"\n                                    label=\"password\"\n                                    className={classes.fieldMedium}\n                                    value={this.state.password}\n                                    onChange={this.handleChangeFor('password')}\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                    InputProps={{\n                                        className: classes.input,\n                                        classes: {\n                                            root: classes.cssOutlinedInput,\n                                            focused: classes.cssFocused,\n                                            notchedOutline: classes.notchedOutline,\n                                        }\n                                    }}\n                                    InputLabelProps={{\n                                        className: classes.input,\n                                        shrink: true\n                                    }}\n                                />\n                                <TextField\n                                    type=\"password\"\n                                    align=\"left\"\n                                    id=\"outlined-name\"\n                                    label=\"confirm password\"\n                                    className={classes.fieldMedium}\n                                    value={this.state.confirmPassword}\n                                    onChange={this.handleChangeFor('confirmPassword')}\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                    InputProps={{\n                                        className: classes.input,\n                                        classes: {\n                                            root: classes.cssOutlinedInput,\n                                            focused: classes.cssFocused,\n                                            notchedOutline: classes.notchedOutline,\n                                        }\n                                    }}\n                                    InputLabelProps={{\n                                        className: classes.input,\n                                        shrink: true\n                                    }}\n                                />\n                            </div>\n                            <div>\n                                <Button\n                                    variant=\"contained\"\n                                    name=\"cancel\"\n                                    color=\"secondary\"\n                                    onClick={() => this.handleUserClose()}\n                                    style={{ marginTop: 10, marginRight: 10 }}>\n                                    <Cancel style={{ marginRight: 3 }} />Cancel\n                                </Button>\n                                <Button\n                                    variant=\"contained\"\n                                    type=\"submit\"\n                                    name=\"submit\"\n                                    color=\"primary\"\n                                    style={{ marginTop: 10 }}>\n                                    <Save style={{ marginRight: 3 }} />Save\n                         </Button>\n                            </div>\n                        </form>\n\n                    </CardContent>\n                </Modal>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (reduxStore) => {\n    return {\n        user: reduxStore.user,\n        team: reduxStore.teamSettings,\n        organization: reduxStore.orgSettings,\n        item: reduxStore.item,\n        admin: reduxStore.wasteWiseAdminUsers\n    }\n}\nexport default connect(mapStateToProps)(withStyles(styles)(Users));","//Import for React, Redux, Material-UI, and the Items and Users components\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n//Material UI Components\nimport Button from '@material-ui/core/Button';\nimport { Fastfood, NaturePeople, Settings } from '@material-ui/icons';\nimport { withStyles } from '@material-ui/core/styles';\nimport Items from './Components/Items';\nimport Users from './Components/Users';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\n//Styles for Material-UI Components\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    card: {\n        textAlign: 'center',\n        background: '#fff',\n        color: 'black',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    cardHeader: {\n        fontSize: 28,\n        fontWeight: 'bold'\n    },\n    cardContent: {\n        fontSize: 24\n    },\n    h1: {\n        textAlign: 'right'\n    },\n    icon: {\n        width: 35,\n        height: 35,\n        marginLeft: 10,\n        marginBottom: -8,\n    },\n    buttonRow: {\n        textAlign: 'center'\n    },\n    button: {\n        margin: 8\n    }\n});\n\nclass SettingsAdmin extends Component {\n\n    state = {\n        items: 'true'\n    }\n    \n    //Determines whether the Items or Users button should be highlighted green, and conditionally renders the appropriate content\n    handleDisplay = () => {\n        this.setState({\n          items: !this.state.items  \n        })\n    }\n\n    render() {\n\n        const { classes } = this.props\n\n        return (\n            <div className={classes.root}>\n                <CssBaseline />\n                <h1 className={classes.h1}>Waste Wise Settings<Settings className={classes.icon} /></h1>\n                <div className={classes.buttonRow}>\n                    {this.state.items && <Button className={classes.button} variant=\"contained\" name=\"items\" color=\"primary\">Items</Button>}\n                    {!this.state.items && <Button className={classes.button} variant=\"contained\" name=\"items\" color=\"secondary\" onClick={() => this.handleDisplay()}>Items</Button>}\n                    {this.state.items && <Button className={classes.button} variant=\"contained\" name=\"users\" color=\"secondary\" onClick={() => this.handleDisplay()}>Users</Button>}\n                    {!this.state.items && <Button className={classes.button} variant=\"contained\" name=\"users\" color=\"primary\">Users</Button>}\n                </div>\n                {this.state.items && <h2>Items<Fastfood className={classes.icon} /></h2>}\n                {this.state.items && <Items/>}\n                {!this.state.items && <h2>Users<NaturePeople className={classes.icon} /></h2>}\n                {!this.state.items && <Users/>}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (reduxStore) => {\n    return {\n        user: reduxStore.user,\n        // team: reduxStore.teamSettings,\n        // organization: reduxStore.orgSettings,\n        // contest: reduxStore.contestSettings\n    }\n}\nexport default connect(mapStateToProps)(withStyles(styles)(SettingsAdmin));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { CSVLink, CSVDownload } from 'react-csv';\n\n\n\nclass AdminGameDataTable extends Component {\n\n    render() {\n        const data = this.props.gameStats;\n        // const data = JSON.stringify(stats);\n\n        return (\n            <div>\n                <CSVLink data={data}>Download</CSVLink>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (reduxStore) => {\n    return {\n        gameStats: reduxStore.adminGameStatistics\n    }\n}\n\nexport default connect(mapStateToProps)(AdminGameDataTable);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport AdminGameDataTable from './AdminGameDataTable';\n\n//material ui elements\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nclass AdminGameData extends Component {\n    componentDidMount() {\n        this.props.dispatch({\n            type: \"FETCH_GAME_STATISTICS\"\n        })\n    }\n\n    render() {\n        let gameStatsArray = [];\n        if (this.props.gameStats) {\n            gameStatsArray = this.props.gameStats.map(row => {\n                //variables to make table returned below more readable\n                let correctCount = parseInt(row.correct_count);\n                let numberOfInstances = parseInt(row.number_of_instances);\n                let incorrectCount = numberOfInstances - correctCount;\n\n                return (\n                    <TableRow key={row.id} >\n                        <TableCell>{row.id}</TableCell>\n                        <TableCell>{row.name}</TableCell>\n                        <TableCell>{row.receptacle}</TableCell>\n                        <TableCell>{correctCount}</TableCell>\n                        <TableCell>{incorrectCount}</TableCell>\n                        <TableCell>{numberOfInstances}</TableCell>\n                        {/* this will perform math for percentage to two decimal places */}\n                        <TableCell>{(parseFloat(row.correct_count / row.number_of_instances)*100).toFixed(2)}</TableCell>\n                    </TableRow>\n                )\n            })\n        }\n\n        return (\n            <div>\n                <Paper>\n                <h1>Game Statistics</h1>\n                <AdminGameDataTable />\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>ID Number</TableCell>\n                                <TableCell>Item Name</TableCell>\n                                <TableCell>Receptacle</TableCell>\n                                <TableCell>Correct</TableCell>\n                                <TableCell>Incorrect</TableCell>\n                                <TableCell>Total</TableCell>\n                                <TableCell>% Correct</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {gameStatsArray}\n                        </TableBody>\n                    </Table>\n                </Paper>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (reduxStore) => {\n    return {\n        gameStats: reduxStore.adminGameStatistics\n    }\n}\nexport default connect(mapStateToProps)(AdminGameData);","import React, { Component } from \"react\";\nimport Paper from '@material-ui/core/Paper';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = {\n    resources:{\n        padding: '5px'\n    }\n}\n\nclass ResourceCredits extends Component {\n  render() {\n    return (\n      <div>\n        <Paper className={this.props.classes.resources}>\n          <h4>Credit for game icons</h4>\n          <div>\n            Icons made by{\" \"}\n            <a\n              href=\"https://www.flaticon.com/authors/smashicons\"\n              title=\"Smashicons\"\n            >\n              Smashicons\n            </a>{\" \"}\n            from{\" \"}\n            <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\n              www.flaticon.com\n            </a>\n          </div>\n\n          <div>\n            Icons made by{\" \"}\n            <a href=\"https://www.flaticon.com/authors/monkik\" title=\"monkik\">\n              monkik\n            </a>{\" \"}\n            from{\" \"}\n            <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\n              www.flaticon.com\n            </a>\n          </div>\n          <div>\n            Icons made by{\" \"}\n            <a\n              href=\"https://www.flaticon.com/authors/payungkead\"\n              title=\"Payungkead\"\n            >\n              Payungkead\n            </a>{\" \"}\n            from{\" \"}\n            <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\n              www.flaticon.com\n            </a>\n          </div>\n        </Paper>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(ResourceCredits);\n","import { red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\n\nconst theme = createMuiTheme({\n  typeography: {\n    fontFamily:\n    '-apple-system,system-ui,BlinkMacSystemFont,' +\n      '\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,sans-serif',\n  },\n  overrides: {\n    MuiFormLabel: {\n      root: {\n        \"&$focused\": {\n          color: \"#009E0A\"\n        }\n      }\n    },\n    MuiCssBaseline: {\n      \"@global\": {\n        body: {\n          backgroundImage: \"url(../img/Lake.JPG)\"\n        }\n      }\n    }\n  },\n  palette: {\n    primary: {\n      main: \"#009E0A\"\n    },\n    secondary: {\n      main: \"#nnn\"\n    },\n    success: {\n      main: \"#009E0A\"\n    },\n    error: {\n      main: red.A400\n    },\n    background: {\n      default: \"#fff\"\n    },\n    text: {\n      default: \"#fff\"\n    }\n  }\n});\n\nexport default (theme);","import React, { Component } from \"react\";\nimport first from \"../../img/firstHowToSlide.png\";\nimport second from \"../../img/secondHowToSlide.png\";\nimport third from \"../../img/thirdHowToSlide.png\";\nimport fourth from \"../../img/fourthHowToSlide.png\";\nimport fifth from \"../../img/fifthHowToSlide.png\";\nimport Button from \"@material-ui/core/Button\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Slide from \"@material-ui/core/Slide\";\nimport { connect } from \"react-redux\";\n\nconst styles = {\n  howToDiv: {\n    backgroundColor: \"rgb(245,245,245,.5)\",\n    borderRadius: \"25px\",\n    textAlign: \"center\"\n  },\n  header: {\n    textAlign: \"center\"\n  },\n  button: {\n    width: \"80%\",\n    fontSize: \"2em\",\n    backgroundColor: \"green\",\n    marginBottom: \"5px\"\n  }\n};\n\nclass HowToPlay extends Component {\n  state = {\n    pageNumber: 1,\n    checked: true\n  };\n\n//sends player back to home screen\n  toHomeScreen = () => {\n    if (this.props.history.location.search) {\n      this.props.history.push(\n        `/gamelaunch${this.props.history.location.search}`\n      );\n    } else {\n      this.props.history.push(\"/gamelaunch\");\n    }\n  };\n//increments page number in state up by one\n  nextPage = () => {\n    this.setState({\n      pageNumber: this.state.pageNumber + 1\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        {/* First page of how to */}\n        {this.state.pageNumber === 1 && (\n          <Slide\n            direction='right'\n            in={this.state.checked}\n            mountOnEnter\n            unmountOnExit>\n            <div className={this.props.classes.howToDiv}>\n              <h1 className={this.props.classes.header}>\n                1. The game will start with a piece of waste on screen that\n                needs to be sorted\n              </h1>\n              <Button\n                className={this.props.classes.button}\n                variant='outlined'\n                onClick={this.nextPage}>\n                Next\n              </Button>\n              <img src={first} alt='How To Play' height='80%' width='80%' />\n              <br />\n            </div>\n          </Slide>\n        )}\n        {/* Second page of how to */}\n        {this.state.pageNumber === 2 && (\n          <Slide\n            direction='left'\n            in={this.state.checked}\n            mountOnEnter\n            unmountOnExit>\n            <div className={this.props.classes.howToDiv}>\n              <h1 className={this.props.classes.header}>\n                2. The player must select the correct bin to place the waste\n                into\n              </h1>\n              <Button\n                className={this.props.classes.button}\n                variant='outlined'\n                onClick={this.nextPage}>\n                Next\n              </Button>\n              <img src={second} alt='How To Play' height='80%' width='80%' />\n            </div>\n          </Slide>\n        )}\n        {/* Third page of how to */}\n        {this.state.pageNumber === 3 && (\n          <Slide\n            direction='right'\n            in={this.state.checked}\n            mountOnEnter\n            unmountOnExit>\n            <div className={this.props.classes.howToDiv}>\n              <h1 className={this.props.classes.header}>\n                3. If the player is correct a new item will appear on screen.\n                There will be fifteen items total\n              </h1>\n              <Button\n                className={this.props.classes.button}\n                variant='outlined'\n                onClick={this.nextPage}>\n                Next\n              </Button>\n              <img src={third} alt='How To Play' height='80%' width='80%' />\n            </div>\n          </Slide>\n        )}\n        {/* Fourth page of how to */}\n        {this.state.pageNumber === 4 && (\n          <Slide\n            direction='left'\n            in={this.state.checked}\n            mountOnEnter\n            unmountOnExit>\n            <div className={this.props.classes.howToDiv}>\n              <h1 className={this.props.classes.header}>\n                4. If the player places an item in the wrong bin, they must\n                place it in the correct bin to move on.\n              </h1>\n              <Button\n                className={this.props.classes.button}\n                variant='outlined'\n                onClick={this.nextPage}>\n                Next\n              </Button>\n              <img src={fifth} alt='How To Play' height='80%' width='80%' />\n            </div>\n          </Slide>\n        )}\n        {/* Fifth page of how to */}\n        {this.state.pageNumber === 5 && (\n          <Slide\n            direction='right'\n            in={this.state.checked}\n            mountOnEnter\n            unmountOnExit>\n            <div className={this.props.classes.howToDiv}>\n              <h1 className={this.props.classes.header}>\n                5. Points are only awarded if the player gets it right on the\n                first try.\n              </h1>\n              <Button\n                className={this.props.classes.button}\n                variant='outlined'\n                onClick={this.toHomeScreen}>\n                Back to Home Screen\n              </Button>\n              <img src={fifth} alt='How To Play' height='80%' width='80%' />\n            </div>\n          </Slide>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = reduxStore => {\n  return {\n    reduxStore\n  };\n};\nexport default connect(mapStateToProps)(withStyles(styles)(HowToPlay));\n","import React, { Component } from \"react\";\nimport {\n  HashRouter as Router,\n  Route,\n  Redirect,\n  Switch\n} from \"react-router-dom\";\n\nimport { connect } from \"react-redux\";\n\n// importing the components\nimport Nav from \"../Nav/Nav\";\nimport ProtectedRoute from \"../ProtectedRoute/ProtectedRoute\";\nimport AdminRoute from \"../AdminRoute/AdminRoute\";\nimport LoginPage from \"../LoginPage/LoginPage\";\nimport GameLaunch from \"../GameLaunch/GameLaunch\";\nimport Game from \"../Game/Game\";\nimport Resources from \"../Resources/Resources\";\nimport Leaderboard from \"../LeaderBoardCompany/LeaderBoardCompany\";\nimport ResultsGuestPlayer from \"../ResultsGuestPlayer/ResultsGuestPlayer\";\nimport SettingsOrganization from \"../SettingsOrganization/SettingsOrganization\";\nimport SettingsAdmin from \"../SettingsAdmin/SettingsAdmin\";\nimport RegisterPage from \"../RegisterPage/RegisterPage\";\nimport AdminGameData from \"../AdminGameData/AdminGameData\";\nimport ResourceCredits from '../Resources/ResourceCredits';\n\n//Styling\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport theme from \"../Theme/Theme.js\";\nimport Container from \"@material-ui/core/Container\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport \"./App.css\";\nimport \"typeface-roboto\";\nimport HowToPlay from \"../HowToPlay/HowToPlay\";\n\nimport HTML5Backend from \"react-dnd-html5-backend\";\nimport { DndProvider } from \"react-dnd\";\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.dispatch({ type: \"FETCH_USER\" });\n  }\n\n  //protected routes = have to be logged in to see\n  //routes = non logged in users are able to see\n  //all routes go to a component which is referenced as the component={}\n  render() {\n    return (\n      <DndProvider backend={HTML5Backend}>\n        <ThemeProvider theme={theme}>\n          <Router>\n            <div>\n              <Nav />\n              <Container>\n                <Typography color=\"secondary\">\n                  <Switch>\n                    {/* Visiting localhost:3000 will redirect to localhost:3000/home */}\n                    <Redirect exact from=\"/\" to=\"/gamelaunch\" />\n                    {/* Visiting localhost:3000/about will show the about page. This is a route anyone can see, no login necessary */}\n                    <ProtectedRoute exact path=\"/home\" component={SettingsOrganization} />\n                    <Route exact path=\"/results\" component={ResultsGuestPlayer} />\n                    <Route exact path=\"/leaderboard\" component={Leaderboard} />\n                    <Route exact path=\"/game\" component={Game} />\n                    <Route exact path=\"/gamelaunch\" component={GameLaunch} />\n                    <Route exact path=\"/login\" component={LoginPage} />\n                    <Route exact path=\"/howtoplay\" component={HowToPlay} />\n                    <Route exact path=\"/resources\" component={Resources} />\n                    <Route exact path=\"/register\" component={RegisterPage} />\n                    <Route exact path='/resourcecredits' component={ResourceCredits} />\n                    <ProtectedRoute exact path=\"/settingsorg\" component={SettingsOrganization} />\n                    <AdminRoute exact path=\"/settingsadmin\" component={SettingsAdmin} />\n                    <ProtectedRoute exact path=\"/leaderboard\" component={Leaderboard} />\n                    <ProtectedRoute exact path=\"/admingamedata\" component ={AdminGameData} />\n                    {/* If none of the other routes matched, we will show a 404. */}\n                    <Route render={() => <h1>404</h1>} />\n                  </Switch>\n                </Typography>\n              </Container>\n            </div>\n          </Router>\n        </ThemeProvider>\n      </DndProvider>\n    );\n  }\n}\n\nconst mapStateToProps = reduxStore => {\n  return {\n    reduxStore\n  };\n};\n\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\n\n\nimport rootReducer from './redux/reducers'; // imports ./redux/reducers/index.js\nimport rootSaga from './redux/sagas'; // imports ./redux/sagas/index.js\n\nimport App from './components/App/App';\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// this line creates an array of all of redux middleware you want to use\n// we don't want a whole ton of console logs in our production code\n// logger will only be added to your project if your in development mode\nconst middlewareList = process.env.NODE_ENV === 'development' ?\n  [sagaMiddleware, logger] :\n  [sagaMiddleware];\n\nconst store = createStore(\n  // tells the saga middleware to use the rootReducer\n  // rootSaga contains all of our other reducers\n  rootReducer,\n  // adds all middleware to our project including saga and logger\n  applyMiddleware(...middlewareList),\n);\n\n// tells the saga middleware to use the rootSaga\n// rootSaga contains all of our other sagas\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('react-root'),\n);\n","module.exports = __webpack_public_path__ + \"static/media/WasteWiselogo.e6689338.jpg\";"],"sourceRoot":""}